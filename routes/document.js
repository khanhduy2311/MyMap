// routes/document.js
const express = require('express');
const router = express.Router();
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');
const pdf = require('pdf-parse');
const mammoth = require('mammoth');
const axios = require('axios');
const FormData = require('form-data');
const AdmZip = require('adm-zip');
const { GoogleGenerativeAI } = require("@google/generative-ai");
const authMiddleware = require('../middlewares/middlewares.js');
const documentController = require('../controllers/documentController.js');

const OCRSPACE_API_KEY = process.env.OCRSPACE_API_KEY;
const GEMINI_KEYS = (process.env.GEMINI_API_KEYS || '').split(',').map(k => k.trim()).filter(Boolean);
const CHUNK_SIZE = parseInt(process.env.CHUNK_SIZE || '8000', 10);

if (!OCRSPACE_API_KEY) console.warn("‚ö†Ô∏è OCRSPACE_API_KEY not set in .env ‚Äî OCR.Space calls will fail.");
if (GEMINI_KEYS.length === 0) console.warn("‚ö†Ô∏è GEMINI_API_KEYS not set.");

const keyManager = {
  keys: GEMINI_KEYS,
  index: 0,
  next() {
    if (!this.keys || this.keys.length === 0) return null;
    const k = this.keys[this.index];
    this.index = (this.index + 1) % this.keys.length;
    return k;
  }
};

// ========== AI FUNCTION ==========
async function generateWithRetry(prompt, maxRetries = 2) {
  if (!keyManager.keys || keyManager.keys.length === 0) {
    throw new Error("No Gemini API keys configured.");
  }

  let lastError = null;

  for (let attempt = 0; attempt < maxRetries; attempt++) {
    const key = keyManager.next();
    try {
      const genAI = new GoogleGenerativeAI(key);
      const model = genAI.getGenerativeModel({
        model: "gemini-2.5-pro",
        generationConfig: {
          temperature: 0.1,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 8192, // TƒÉng gi·ªõi h·∫°n output n·∫øu c·∫ßn c·∫•u tr√∫c JSON ph·ª©c t·∫°p
           responseMimeType: "application/json", // Y√™u c·∫ßu Gemini tr·∫£ v·ªÅ JSON tr·ª±c ti·∫øp
        }
      });

      console.log(`Attempt ${attempt + 1} with key ending in ${key.slice(-4)}...`);
      // console.log(`Prompt (start): ${prompt.substring(0, 300)}...`);
      // console.log(`Prompt (end): ...${prompt.substring(prompt.length - 300)}`);

      const result = await model.generateContent(prompt);
      console.log(`Attempt ${attempt + 1} successful.`);
      return result;

    } catch (error) {
      lastError = error;
       const errorDetails = error?.response?.data?.error || error?.response || error;
       const errorMessage = errorDetails?.message || error?.message || String(error);
       console.warn(`Attempt ${attempt + 1} with key ending in ${key.slice(-4)} failed:`, errorMessage);
       if (errorDetails) console.warn('Error Details:', JSON.stringify(errorDetails, null, 2));


      const statusCode = error?.response?.status || (errorMessage.includes('429') ? 429 : null);

      if (statusCode !== 429 && !errorMessage.toLowerCase().includes('quota') && !errorMessage.toLowerCase().includes('rate limit')) {
         console.error("Non-quota/rate limit error encountered, throwing immediately:", errorMessage);
        throw error;
      }

      if (attempt < maxRetries - 1) {
         console.log(`Quota/Rate limit likely hit. Waiting 2 seconds before retrying with next key...`);
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
  }

  console.error(`All ${maxRetries} Gemini API retries failed. Last error:`, lastError?.message || lastError);
  throw new Error(`Gemini API call failed after ${maxRetries} attempts: ${lastError?.message || 'Unknown API error'}`);
}

// ========== TEXT EXTRACTION ==========
async function extractTextSmart(buffer, mimeType, sseRes) {
  console.log("üîç Extracting text from:", mimeType);
  sendSSE(sseRes, 'progress', { message: `üîç B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t t·ª´ ${mimeType}...` });

  if (mimeType === 'application/pdf') {
    try {
      const data = await pdf(buffer, { max: -1 }); // Attempt to parse all pages
      const text = data.text?.trim() || '';
      if (!text) throw new Error("Extracted PDF text is empty or pdf-parse failed.");

      sendSSE(sseRes, 'progress', { message: `‚úì ƒê√£ tr√≠ch xu·∫•t ${text.length} k√Ω t·ª± t·ª´ PDF` });
      console.log(`‚úì Successfully extracted ${text.length} characters from PDF.`);
      return text;

    } catch (error) {
      console.warn("PDF extraction failed:", error.message);
      sendSSE(sseRes, 'progress', { message: 'üîÑ Tr√≠ch xu·∫•t PDF th·∫•t b·∫°i, th·ª≠ s·ª≠ d·ª•ng OCR...' });

      try {
        const ocrText = await runOcrSpaceFull(buffer, mimeType);
        if (!ocrText) throw new Error("OCR text for PDF is empty.");
        console.log(`‚úì Successfully extracted ${ocrText.length} characters from PDF via OCR.`);
        sendSSE(sseRes, 'progress', { message: `‚úì ƒê√£ tr√≠ch xu·∫•t ${ocrText.length} k√Ω t·ª± t·ª´ PDF b·∫±ng OCR` });
        return ocrText;
      } catch (ocrError) {
        console.error("OCR for PDF also failed:", ocrError.message);
        sendSSE(sseRes, 'error', { message: `L·ªói OCR PDF: ${ocrError.message}` });
        throw new Error(`Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ PDF b·∫±ng c·∫£ hai ph∆∞∆°ng ph√°p: ${ocrError.message}`);
      }
    }
  }

  if (mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
    try {
      const { value } = await mammoth.extractRawText({ buffer });
      const text = value?.trim() || '';
      if (!text) throw new Error("Extracted DOCX text is empty.");
      sendSSE(sseRes, 'progress', { message: `‚úì ƒê√£ tr√≠ch xu·∫•t ${text.length} k√Ω t·ª± t·ª´ DOCX` });
      console.log(`‚úì Successfully extracted ${text.length} characters from DOCX.`);
      return text;
    } catch (error) {
      console.error("DOCX extraction failed:", error.message);
      sendSSE(sseRes, 'error', { message: `L·ªói tr√≠ch xu·∫•t DOCX: ${error.message}` });
      throw new Error(`Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ DOCX: ${error.message}`);
    }
  }

  if (mimeType === 'text/plain') {
    try {
      const text = buffer.toString('utf8').trim();
      if (!text) throw new Error("Extracted TXT text is empty.");
      sendSSE(sseRes, 'progress', { message: `‚úì ƒê√£ tr√≠ch xu·∫•t ${text.length} k√Ω t·ª± t·ª´ TXT` });
      console.log(`‚úì Successfully extracted ${text.length} characters from TXT.`);
      return text;
    } catch (error) {
      console.error("TXT extraction failed:", error.message);
      sendSSE(sseRes, 'error', { message: `L·ªói ƒë·ªçc file TXT: ${error.message}` });
      throw new Error(`Kh√¥ng th·ªÉ ƒë·ªçc file TXT: ${error.message}`);
    }
  }

  if (mimeType.startsWith('image/')) {
    console.log(`Attempting OCR for image type: ${mimeType}`);
    sendSSE(sseRes, 'progress', { message: 'üîÑ ƒêang x·ª≠ l√Ω h√¨nh ·∫£nh v·ªõi OCR...' });
    try {
      const ocrText = await runOcrSpaceFull(buffer, mimeType);
      if (!ocrText) throw new Error("OCR text for image is empty.");
      console.log(`‚úì Successfully extracted ${ocrText.length} characters from image via OCR.`);
      sendSSE(sseRes, 'progress', { message: `‚úì ƒê√£ tr√≠ch xu·∫•t ${ocrText.length} k√Ω t·ª± ·∫£nh b·∫±ng OCR` });
      return ocrText;
    } catch (error) {
      console.error("Image OCR failed:", error.message);
      sendSSE(sseRes, 'error', { message: `L·ªói OCR ·∫£nh: ${error.message}` });
      throw new Error(`Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ ·∫£nh b·∫±ng OCR: ${error.message}`);
    }
  }

  console.error(`Unsupported or unknown file type: ${mimeType || 'unknown'}`);
  sendSSE(sseRes, 'error', { message: `ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ho·∫∑c kh√¥ng x√°c ƒë·ªãnh: ${mimeType || 'unknown'}` });
  throw new Error(`ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ho·∫∑c kh√¥ng x√°c ƒë·ªãnh: ${mimeType || 'unknown'}`);
}


// ========== CHUNK PROCESSING ==========
function splitChunksSimple(text, size = CHUNK_SIZE) {
  if (!text || text.length === 0) return [];

  const chunks = [];
  let currentPos = 0;
  while (currentPos < text.length) {
    let endPos = Math.min(currentPos + size, text.length);
    if (endPos < text.length) {
        let breakPos = text.lastIndexOf('\n', endPos);
        if (breakPos <= currentPos) breakPos = text.lastIndexOf('.', endPos);
        if (breakPos > currentPos + size / 2) {
            endPos = breakPos + 1;
        }
    }
    chunks.push(text.slice(currentPos, endPos));
    currentPos = endPos;
  }

  console.log(`Split text (${text.length} chars) into ${chunks.length} chunks of size ~${size}.`);
  return chunks;
}


async function analyzeChunkSimple(chunk, chunkIndex, totalChunks) {
   console.log(`Analyzing chunk ${chunkIndex + 1}/${totalChunks}...`);

   // =========================================================
   // === GI·ªÆ NGUY√äN PROMPT G·ªêC C·ª¶A B·∫†N ===
   // =========================================================
   const prompt = `Ph√¢n t√≠ch vƒÉn b·∫£n sau ƒë√¢y v√† tr√≠ch xu·∫•t c·∫•u tr√∫c chi ti·∫øt ƒë·ªÉ t·∫°o s∆° ƒë·ªì t∆∞ duy (mindmap).
X√°c ƒë·ªãnh ch·ªß ƒë·ªÅ ch√≠nh, c√°c ch·ªß ƒë·ªÅ ph·ª• v√† c√°c ƒëi·ªÉm ch√≠nh trong m·ªói ch·ªß ƒë·ªÅ ph·ª•.

‚ö†Ô∏è Y√äU C·∫¶U QUAN TR·ªåNG:
- Gi·ªØ nguy√™n h·ªá th·ªëng ƒë√°nh s·ªë, k√Ω hi·ªáu ƒë·ªÅ m·ª•c (Ch∆∞∆°ng, I, 1, a, ...) trong vƒÉn b·∫£n g·ªëc v√† ƒë∆∞a v√†o c√°c tr∆∞·ªùng 'chapterTitle', 'title', 'subtitle' t∆∞∆°ng ·ª©ng.
- N·∫øu trong vƒÉn b·∫£n g·ªëc c√≥ th·ª© t·ª± ƒë√°nh s·ªë, ph·∫£i gi·ªØ l·∫°i y nguy√™n trong ph·∫ßn 'chapterTitle', 'title', 'subtitle'.
- Ch·ªâ t√≥m t·∫Øt ng·∫Øn g·ªçn ph·∫ßn n·ªôi dung (points), KH√îNG ƒë∆∞·ª£c l∆∞·ª£c b·ªè ho·∫∑c thay ƒë·ªïi c·∫•u tr√∫c ƒë·ªÅ m·ª•c g·ªëc.
- ƒê·ªëi v·ªõi M·ªñI 'subtitle' (ho·∫∑c 'title' n·∫øu kh√¥ng c√≥ 'subtitle'), B·∫ÆT BU·ªòC ph·∫£i tr√≠ch xu·∫•t v√† t√≥m t·∫Øt 1-3 √Ω ch√≠nh, ƒë·ªãnh nghƒ©a, ho·∫∑c lu·∫≠n ƒëi·ªÉm quan tr·ªçng nh·∫•t t·ª´ n·ªôi dung vƒÉn b·∫£n n·∫±m d∆∞·ªõi ƒë·ªÅ m·ª•c ƒë√≥ v√†o m·∫£ng "points".
- M·∫£ng "points" PH·∫¢I ch·ª©a n·ªôi dung t√≥m t·∫Øt th·ª±c t·∫ø, KH√îNG ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng ho·∫∑c ch·ªâ ghi m√¥ t·∫£ chung chung (v√≠ d·ª•: KH√îNG ghi "Tr√¨nh b√†y v·ªÅ kh√°i ni·ªám" m√† ph·∫£i ghi "Kh√°i ni·ªám X l√†...") n·∫øu c√≥ n·ªôi dung trong vƒÉn b·∫£n g·ªëc.
- C·∫•u tr√∫c ƒë·∫ßu ra PH·∫¢I l√† m·ªôt ƒë·ªëi t∆∞·ª£ng JSON h·ª£p l·ªá duy nh·∫•t. Ph·∫£n h·ªìi CH·ªà ƒë∆∞·ª£c ch·ª©a ƒë·ªëi t∆∞·ª£ng JSON, tuy·ªát ƒë·ªëi KH√îNG c√≥ b·∫•t k·ª≥ k√Ω t·ª± n√†o tr∆∞·ªõc d·∫•u '{' m·ªü ƒë·∫ßu ho·∫∑c sau d·∫•u '}' k·∫øt th√∫c.

C·∫•u tr√∫c JSON m·∫´u (ph·∫£i theo ƒë√∫ng ƒë·ªãnh d·∫°ng n√†y):
{
  "mainTopic": "T√™n T√†i Li·ªáu Ho·∫∑c Ch·ªß ƒê·ªÅ Ch√≠nh (c·ªßa to√†n b·ªô t√†i li·ªáu)",
  "subTopics": [
    {
      "chapterTitle": "Ch∆∞∆°ng I: Gi·ªõi thi·ªáu t·ªïng quan",
      "mainSections": [
        {
          "title": "1. Kh√°i ni·ªám c∆° b·∫£n",
          "subsections": [
            { "subtitle": "1.1. ƒê·ªãnh nghƒ©a A", "points": ["ƒê·ªãnh nghƒ©a A l√† m·ªôt kh√°i ni·ªám quan tr·ªçng...", "N√≥ bao g·ªìm c√°c y·∫øu t·ªë..."] }
          ]
        },
        {
          "title": "2. M·ª•c kh√¥ng c√≥ subsection",
          "points": ["Vai tr√≤ ch√≠nh c·ªßa m·ª•c 2 l√†...", "C·∫ßn l∆∞u √Ω ƒëi·ªÉm..."],
          "subsections": []
        }
      ]
    }
  ],
  "summary": "T√≥m t·∫Øt chung v·ªÅ n·ªôi dung ch√≠nh trong PH·∫¶N VƒÇN B·∫¢N n√†y."
}

VƒÉn b·∫£n c·∫ßn ph√¢n t√≠ch:
---
${chunk}
---`;
   // =========================================================

  try {
    const result = await generateWithRetry(prompt);
     const candidate = result?.response?.candidates?.[0];
     if (candidate?.content?.parts?.[0]?.text) {
         try {
             const parsedJson = JSON.parse(candidate.content.parts[0].text);
              if (parsedJson.mainTopic && typeof parsedJson.mainTopic === 'string' &&
                  Array.isArray(parsedJson.subTopics) &&
                  parsedJson.summary && typeof parsedJson.summary === 'string' &&
                  parsedJson.subTopics.every(sub =>
                      typeof sub.chapterTitle === 'string' &&
                      Array.isArray(sub.mainSections) &&
                      sub.mainSections.every(main =>
                          typeof main.title === 'string' &&
                          Array.isArray(main.subsections) &&
                          (main.subsections.length > 0 ?
                              main.subsections.every(subsec =>
                                  typeof subsec.subtitle === 'string' &&
                                  Array.isArray(subsec.points) &&
                                  subsec.points.length > 0 &&
                                  subsec.points.every(p => typeof p === 'string' && p.trim() !== '')
                              ) :
                              (Array.isArray(main.points) && main.points.length > 0 && main.points.every(p => typeof p === 'string' && p.trim() !== '')))
                      )
                  )
              ) {
                   console.log(`‚úì Successfully analyzed and validated chunk ${chunkIndex + 1} JSON structure. Topic: ${parsedJson.mainTopic}`);
                   parsedJson.subTopics.forEach(sub => {
                       sub.mainSections.forEach(main => {
                           if (main.points) main.points = main.points.map(p => String(p).trim()).filter(Boolean);
                           main.subsections.forEach(subsec => {
                               subsec.points = subsec.points.map(p => String(p).trim()).filter(Boolean);
                           });
                       });
                   });
                  return parsedJson;
              } else {
                   console.warn(`‚ö†Ô∏è JSON structure validation failed for chunk ${chunkIndex + 1}. Parsed: ${JSON.stringify(parsedJson, null, 2)}`);
              }
         } catch (e) {
             console.warn(`JSON parse error (expected JSON response) for chunk ${chunkIndex + 1}: ${e.message}. Raw Response: "${candidate.content.parts[0].text.substring(0, 300)}..."`);
         }
     } else {
         console.warn(`No valid JSON text found in Gemini response for chunk ${chunkIndex + 1}. Response: ${JSON.stringify(result?.response)}`);
     }

    console.log(`Falling back for chunk ${chunkIndex + 1}.`);
    return {
       mainTopic: `Ph·∫ßn ${chunkIndex + 1} (Fallback)`,
       subTopics: [],
       summary: `Kh√¥ng th·ªÉ ph√¢n t√≠ch chi ti·∫øt c·∫•u tr√∫c JSON cho ph·∫ßn n√†y. N·ªôi dung g·ªëc: ${chunk.substring(0, 200)}...`,
       fallback: true
    };

  } catch (error) {
    console.error(`‚ùå Analysis API call failed for chunk ${chunkIndex + 1}:`, error.message);
    return {
      mainTopic: `L·ªói ph√¢n t√≠ch ph·∫ßn ${chunkIndex + 1}`,
       subTopics: [],
       summary: `Kh√¥ng th·ªÉ ph√¢n t√≠ch n·ªôi dung do l·ªói g·ªçi API: ${error.message.substring(0, 100)}...`,
      error: true
    };
  }
}


// ========== MINDMAP STRUCTURE AGGREGATION & GENERATION ==========
function aggregateJsonResults(results, chunks) {
    console.log(`Aggregating results from ${results.length} JSON analyses (expected ${chunks.length}).`);
    const validResults = results.filter(r => !r.error && !r.fallback);

    if (validResults.length === 0) {
        console.warn("‚ö†Ô∏è No valid JSON analysis results to aggregate.");
        return {
            mainTopic: "L·ªói Ph√¢n T√≠ch T√†i Li·ªáu",
            subTopics: [{
                chapterTitle: "Th√¥ng B√°o L·ªói",
                mainSections: [{
                    title: "Kh√¥ng th·ªÉ ph√¢n t√≠ch",
                    points: [
                        `Kh√¥ng c√≥ ph·∫ßn n√†o c·ªßa t√†i li·ªáu ƒë∆∞·ª£c ph√¢n t√≠ch th√†nh c√¥ng theo c·∫•u tr√∫c y√™u c·∫ßu.`,
                        `T·ªïng s·ªë ph·∫ßn: ${chunks.length}`,
                        `S·ªë ph·∫ßn l·ªói/fallback: ${results.length}`
                    ],
                    subsections: []
                }]
            }],
            summary: "Qu√° tr√¨nh ph√¢n t√≠ch t√†i li·ªáu ƒë√£ g·∫∑p l·ªói nghi√™m tr·ªçng.",
            error: true
        };
    }

    const finalMainTopic = validResults[0].mainTopic || "T·ªïng h·ª£p t√†i li·ªáu";
    const combinedSummary = validResults.map(r => r.summary || '').filter(Boolean).join('\n\n');
    const allSubTopics = validResults.flatMap(r => r.subTopics || []);
    const groupedSubTopics = [];
    const chapterMap = new Map();

    allSubTopics.forEach(subTopic => {
        const chapterKey = subTopic.chapterTitle || "Ch∆∞∆°ng kh√¥ng x√°c ƒë·ªãnh";
        if (!chapterMap.has(chapterKey)) {
            chapterMap.set(chapterKey, { chapterTitle: chapterKey, mainSections: [] });
            groupedSubTopics.push(chapterMap.get(chapterKey));
        }
        const currentChapter = chapterMap.get(chapterKey);
        (subTopic.mainSections || []).forEach(mainSection => {
            if (!currentChapter.mainSections.some(existing => existing.title === mainSection.title)) {
                currentChapter.mainSections.push(mainSection);
            } else {
                 console.warn(`Duplicate mainSection title found and skipped: "${mainSection.title}" in chapter "${chapterKey}"`);
            }
        });
    });

     console.log(`Aggregated into ${groupedSubTopics.length} chapters/subtopics.`);

    return {
        mainTopic: finalMainTopic,
        subTopics: groupedSubTopics,
        summary: combinedSummary || "Kh√¥ng c√≥ t√≥m t·∫Øt t·ªïng h·ª£p.",
        totalChunks: chunks.length,
        analyzedChunks: validResults.length
    };
}

function generateMarkdownFromJson(aggregatedJson) {
    console.log("Generating final Markdown from aggregated JSON structure...");
    if (aggregatedJson.error) {
        console.warn("‚ö†Ô∏è Aggregated JSON indicates error. Generating error Markdown.");
        let errorMd = `# ${aggregatedJson.mainTopic}\n\n`;
        (aggregatedJson.subTopics || []).forEach(sub => {
            errorMd += `## ${sub.chapterTitle}\n`;
            (sub.mainSections || []).forEach(main => {
                errorMd += `### ${main.title}\n`;
                (main.points || []).forEach(point => { errorMd += `- ${point}\n`; });
            });
            errorMd += '\n';
        });
        errorMd += `**T√≥m t·∫Øt:** ${aggregatedJson.summary}\n`;
        return errorMd;
    }

    let markdown = `# ${aggregatedJson.mainTopic}\n\n`;

    (aggregatedJson.subTopics || []).forEach(subTopic => {
        if (subTopic.chapterTitle) { markdown += `## ${subTopic.chapterTitle}\n`; }
        (subTopic.mainSections || []).forEach(mainSection => {
            markdown += `### ${mainSection.title}\n`;
            if (mainSection.subsections && mainSection.subsections.length > 0) {
                mainSection.subsections.forEach(subsection => {
                    markdown += `#### ${subsection.subtitle}\n`;
                    (subsection.points || []).forEach(point => { markdown += `- ${point}\n`; });
                });
            } else if (mainSection.points && mainSection.points.length > 0) {
                mainSection.points.forEach(point => { markdown += `- ${point}\n`; });
            } else {
                 markdown += `- *(Kh√¥ng c√≥ ƒëi·ªÉm chi ti·∫øt)*\n`;
            }
            markdown += '\n';
        });
        markdown += '\n';
    });

    if (aggregatedJson.totalChunks > 1) {
        markdown += `\n---\n*T·ªïng h·ª£p t·ª´ ${aggregatedJson.analyzedChunks}/${aggregatedJson.totalChunks} ph·∫ßn n·ªôi dung.*`;
    }

    console.log("‚úì Successfully generated Markdown from JSON.");
    return markdown.trim();
}


// ========== OCR FUNCTIONS ==========
// (Gi·ªØ nguy√™n)
async function ocrSpaceParseBuffer(buffer, mimeType) { if (!OCRSPACE_API_KEY) throw new Error("OCRSPACE_API_KEY not configured."); const form = new FormData(); form.append('apikey', OCRSPACE_API_KEY); form.append('language', 'vie'); form.append('isOverlayRequired', 'false'); form.append('OCREngine', '2'); form.append('scale', 'true'); form.append('detectOrientation', 'true'); form.append('file', buffer, { filename: `upload.${mimeType ? mimeType.split('/')[1] || 'bin' : 'bin'}` }); console.log('Sending request to OCR.Space...'); try { const resp = await axios.post('https://api.ocr.space/parse/image', form, { headers: form.getHeaders(), timeout: 90000 }); console.log('Received response from OCR.Space.'); if (resp.data?.IsErroredOnProcessing) { console.error('OCR.Space Processing Error:', resp.data.ErrorMessage.join ? resp.data.ErrorMessage.join('; ') : resp.data.ErrorMessage); } if (resp.data?.OCRExitCode !== 1) { console.warn(`OCR.Space Exit Code: ${resp.data?.OCRExitCode}. Details might be in ErrorMessage.`); } return resp.data; } catch (error) { console.error("OCR.Space API request error:", error.message); if (error.response) { console.error("OCR.Space Response Status:", error.response.status); console.error("OCR.Space Response Data:", error.response.data); } throw new Error(`L·ªói g·ªçi API OCR.Space: ${error.message}`); } }
async function runOcrSpaceFull(buffer, mimeType) { console.log("Running full OCR process..."); const data = await ocrSpaceParseBuffer(buffer, mimeType); if (data?.IsErroredOnProcessing || data?.OCRExitCode !== 1) { const errorMessages = data?.ErrorMessage?.join ? data.ErrorMessage.join('; ') : (data?.ErrorMessage || "L·ªói x·ª≠ l√Ω OCR kh√¥ng x√°c ƒë·ªãnh"); console.error(`OCR processing failed with exit code ${data?.OCRExitCode}. Errors: ${errorMessages}`); throw new Error(errorMessages); } if (!data.ParsedResults || data.ParsedResults.length === 0) { console.warn("OCR processed successfully but returned no parsed results."); return ''; } const combinedText = data.ParsedResults.map(p => p.ParsedText || '').join('\n').trim(); console.log(`OCR successful, extracted ${combinedText.length} characters.`); return combinedText; }

// ========== MULTER & STORAGE ==========
// (Gi·ªØ nguy√™n)
const upload = multer({ storage: multer.memoryStorage(), limits: { fileSize: 50 * 1024 * 1024 }, fileFilter: (req, file, cb) => { const allowedTypes = ['application/pdf', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain', 'image/jpeg', 'image/png', 'image/gif']; if (allowedTypes.includes(file.mimetype)) { cb(null, true); } else { console.warn(`File rejected: Unsupported type ${file.mimetype}`); cb(new Error(`Ch·ªâ ch·∫•p nh·∫≠n file PDF, DOCX, TXT, JPG, PNG, GIF.`)); } } });
const jobs = new Map();
const sseClients = new Map();

// ========== SSE FUNCTIONS ==========
// (Gi·ªØ nguy√™n)
function sendSSE(res, event, data) { if (!res || res.writableEnded) { if (res && res.writableEnded) { console.warn(`Attempted to write to an already closed SSE stream for event: ${event}`); } return; } try { res.write(`event: ${event}\ndata: ${JSON.stringify(data)}\n\n`); } catch (e) { console.error(`‚ùå Failed to send SSE event '${event}':`, e.message); try { res.end(); } catch (closeErr) {} sseClients.delete(findJobIdByResponse(res)); } }
function findJobIdByResponse(res) { for (let [jobId, clientRes] of sseClients.entries()) { if (clientRes === res) { return jobId; } } return null; }

// ========== ROUTES ==========
// (Gi·ªØ nguy√™n)
router.get('/page', authMiddleware.checkLoggedIn, documentController.getUploadPage);
router.post('/start-summarize', authMiddleware.checkLoggedIn, upload.single('documentFile'), (req, res, next) => { if (!req.file) { console.log("Upload failed: No file received."); return res.status(400).json({ error: 'Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c t·∫£i l√™n.' }); } console.log(`Received file: ${req.file.originalname}, Type: ${req.file.mimetype}, Size: ${req.file.size}`); const jobId = uuidv4(); jobs.set(jobId, { id: jobId, status: 'pending', buffer: req.file.buffer, mimeType: req.file.mimetype, filename: req.file.originalname, results: [], startTime: Date.now() }); console.log(`Job created: ${jobId} for file ${req.file.originalname}`); res.status(202).json({ jobId }); }, (err, req, res, next) => { console.error("Multer Upload Error:", err.message); if (err instanceof multer.MulterError) { if (err.code === 'LIMIT_FILE_SIZE') { return res.status(400).json({ error: `File qu√° l·ªõn, t·ªëi ƒëa 50MB.` }); } return res.status(400).json({ error: `L·ªói t·∫£i file: ${err.message}` }); } else if (err) { if (err.message.includes('Ch·ªâ ch·∫•p nh·∫≠n file')) { return res.status(400).json({ error: err.message }); } return res.status(500).json({ error: `L·ªói server kh√¥ng x√°c ƒë·ªãnh khi t·∫£i file: ${err.message}` }); } next(); });
router.get('/summarize-stream', authMiddleware.checkLoggedIn, (req, res) => { const { jobId } = req.query; const job = jobs.get(jobId); if (!jobId || !job) { console.log(`SSE connection failed: Job ${jobId} not found.`); return res.status(404).send('Job not found or expired.'); } console.log(`SSE client connected for job: ${jobId}`); res.writeHead(200, { 'Content-Type': 'text/event-stream', 'Cache-Control': 'no-cache', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', }); sseClients.set(jobId, res); req.on('close', () => { console.log(`SSE client disconnected for job: ${jobId}`); sseClients.delete(jobId); const currentJob = jobs.get(jobId); if (currentJob && (currentJob.status === 'processing' || currentJob.status === 'pending')) { console.log(`Job ${jobId} still processing after client disconnect.`); } if (!res.writableEnded) { res.end(); } }); if (job.status === 'pending') { console.log(`Starting processing for pending job: ${jobId}`); processDocument(jobId).catch(error => { console.error(`‚ùå CRITICAL: Uncaught error starting processDocument for ${jobId}:`, error); sendSSE(sseClients.get(jobId), 'error', { message: `L·ªói nghi√™m tr·ªçng khi b·∫Øt ƒë·∫ßu x·ª≠ l√Ω: ${error.message}` }); if (sseClients.has(jobId)) { try { sseClients.get(jobId).end(); } catch (e) {} sseClients.delete(jobId); } if (jobs.has(jobId)) { jobs.get(jobId).status = 'error'; jobs.get(jobId).error = `L·ªói nghi√™m tr·ªçng: ${error.message}`; jobs.get(jobId).buffer = null; } }); } else { console.log(`Job ${jobId} status is already '${job.status}'. Sending final status.`); if (job.status === 'done') { sendSSE(res, 'complete', { markdown: job.result, visualizationUrl: `/upload/mindmap-visualization/${jobId}`, stats: job.stats || {} }); res.end(); } else if (job.status === 'error') { sendSSE(res, 'error', { message: `L·ªói x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥: ${job.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}` }); res.end(); } } });


// ========== MINDMAP VISUALIZATION HTML GENERATOR ==========
function generateMindmapHTML(markdownContent, title = "Mindmap Visualization") {
  // ƒê·∫£m b·∫£o markdownContent kh√¥ng r·ªóng v√† c√≥ ƒë·ªãnh d·∫°ng c∆° b·∫£n
  if (!markdownContent || markdownContent.trim() === '') {
    markdownContent = "# L·ªói\nN·ªôi dung Markdown tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá.";
  }

  // Chu·∫©n h√≥a Markdown - ƒë·∫£m b·∫£o c√≥ √≠t nh·∫•t m·ªôt ti√™u ƒë·ªÅ c·∫•p 1
  if (!markdownContent.includes('# ')) {
    markdownContent = `# ${title}\n\n${markdownContent}`;
  }

  const escapedMarkdown = markdownContent
      .replace(/\\/g, '\\\\')
      .replace(/`/g, '\\`')
      .replace(/\$\{/g, '\\${');

  return `
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <script src="https://cdn.jsdelivr.net/npm/d3@6.7.0"></script>
    <script src="https://cdn.jsdelivr.net/npm/markmap-view@0.2.7"></script>
    <script src="https://cdn.jsdelivr.net/npm/markmap-lib@0.11.6"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: #f4f7f6; min-height: 100vh; padding: 15px; }
        .container { max-width: 95%; margin: 15px auto; background: white; border-radius: 12px; box-shadow: 0 10px 30px rgba(0,0,0,0.08); overflow: hidden; display: flex; flex-direction: column; }
        .header { background: #4a69bd; color: white; padding: 20px 30px; text-align: center; border-bottom: 5px solid #3c5aa0; }
        .header h1 { font-size: 2em; margin-bottom: 5px; font-weight: 600; }
        .header p { font-size: 1em; opacity: 0.9; }
        .content { display: flex; flex: 1; min-height: 650px; }
        .markdown-panel { flex: 1; padding: 20px; background: #ffffff; border-right: 1px solid #e0e0e0; overflow-y: auto; max-height: 700px; display: flex; flex-direction: column; }
        .visualization-panel { flex: 2; padding: 20px; background: #fafafa; display: flex; flex-direction: column; }
        .panel-header { font-size: 1.1em; font-weight: 600; margin-bottom: 15px; color: #333; border-bottom: 2px solid #4a69bd; padding-bottom: 5px; }
        #mindmap { width: 100%; height: 100%; flex: 1; border: 1px solid #e0e0e0; border-radius: 8px; background: #fff; min-height: 500px; }
        .markdown-content { flex: 1; background: #f8f9fa; border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px; font-family: 'Consolas', 'Monaco', monospace; font-size: 0.9em; line-height: 1.5; white-space: pre-wrap; word-wrap: break-word; overflow-y: auto; }
        .controls { padding: 15px 20px; background: #e9ecef; border-top: 1px solid #d6dbe0; display: flex; gap: 12px; justify-content: center; flex-wrap: wrap; }
        .btn { padding: 10px 20px; border: none; border-radius: 6px; font-size: 15px; font-weight: 500; cursor: pointer; transition: all 0.2s ease; text-decoration: none; display: inline-flex; align-items: center; gap: 6px; }
        .btn-primary { background-color: #007bff; color: white; }
        .btn-primary:hover { background-color: #0056b3; }
        .btn-secondary { background-color: #6c757d; color: white; }
        .btn-secondary:hover { background-color: #5a6268; }
        .loading-error { display: flex; justify-content: center; align-items: center; height: 100%; font-size: 16px; color: #6c757d; padding: 20px; text-align: center; }
         .loading-error strong { color: #dc3545; }
        svg text { font-size: 14px; }
        @media (max-width: 992px) { .content { flex-direction: column; min-height: auto; } .markdown-panel { border-right: none; border-bottom: 1px solid #e0e0e0; max-height: 400px; } #mindmap { min-height: 450px; } .container { max-width: 100%; margin: 10px; } .header { padding: 15px 20px; } .header h1 { font-size: 1.8em; } }
        @media (max-width: 768px) { .controls { flex-direction: column; align-items: stretch; } .btn { width: 100%; justify-content: center; } }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üó∫Ô∏è S∆° ƒë·ªì t∆∞ duy</h1>
            <p>Tr·ª±c quan h√≥a c·∫•u tr√∫c t√†i li·ªáu c·ªßa b·∫°n</p>
        </div>
        <div class="content">
            <div class="markdown-panel">
                <h3 class="panel-header">N·ªôi dung Markdown:</h3>
                <div class="markdown-content"><pre><code>${escapedMarkdown}</code></pre></div>
            </div>
            <div class="visualization-panel">
                <h3 class="panel-header">S∆° ƒë·ªì t∆∞∆°ng t√°c:</h3>
                <svg id="mindmap">
                    <foreignObject width="100%" height="100%">
                        <body xmlns="http://www.w3.org/1999/xhtml">
                            <div class="loading-error" id="loading-placeholder">ƒêang t·∫£i s∆° ƒë·ªì...</div>
                        </body>
                    </foreignObject>
                </svg>
            </div>
        </div>
        <div class="controls">
            <button class="btn btn-primary" onclick="downloadMindmap()">üì• T·∫£i v·ªÅ (PNG)</button>
            <button class="btn btn-secondary" onclick="window.print()">üñ®Ô∏è In S∆° ƒë·ªì</button>
            <a href="/upload/page" class="btn btn-secondary">‚Ü©Ô∏è Quay l·∫°i T·∫£i l√™n</a>
        </div>
    </div>
    <script>
        const markdownContent = \`${escapedMarkdown}\`;

        // Debug: log markdown content ƒë·ªÉ ki·ªÉm tra
        console.log('Markdown content length:', markdownContent.length);
        console.log('First 500 chars:', markdownContent.substring(0, 500));
        console.log('Last 500 chars:', markdownContent.substring(markdownContent.length - 500));

        function initializeMarkmap() {
            const svgElement = document.getElementById('mindmap');
            const loadingPlaceholder = svgElement ? svgElement.querySelector('#loading-placeholder') : null;
            
            // Ki·ªÉm tra th∆∞ vi·ªán ƒë√£ load ch∆∞a
            if (typeof window.markmap === 'undefined' || typeof window.markmap.Markmap === 'undefined' || typeof window.markmap.Transformer === 'undefined' || typeof window.d3 === 'undefined') {
                console.warn('Markmap/D3 libraries not fully loaded yet, retrying...');
                if (loadingPlaceholder) loadingPlaceholder.textContent = 'ƒêang ch·ªù th∆∞ vi·ªán D3/Markmap...';
                setTimeout(initializeMarkmap, 150);
                return;
            }
            
            if (!svgElement) {
                console.error('SVG element #mindmap not found!');
                if (loadingPlaceholder) loadingPlaceholder.innerHTML = '<strong>L·ªói: Kh√¥ng t√¨m th·∫•y khu v·ª±c v·∫Ω s∆° ƒë·ªì.</strong>';
                return;
            }

            svgElement.innerHTML = ''; // Clear loading message
            console.log('Markmap libraries loaded, attempting to render.');
            
            const { Transformer, Markmap, panZoom } = window.markmap;
            
            try {
                const transformer = new Transformer();
                console.log('Transforming markdown...');
                
                const { root, features } = transformer.transform(markdownContent);
                console.log('Transformation result:', { root, features });
                
                if (!root) {
                    console.error('Invalid root:', root);
                    throw new Error('N·ªôi dung Markdown kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng th·ªÉ ph√¢n t√≠ch th√†nh c·∫•u tr√∫c s∆° ƒë·ªì.');
                }
                
                const options = { 
                    autoFit: true,
                    duration: 500,
                    nodeMinHeight: 16,
                    spacingVertical: 5,
                    spacingHorizontal: 80,
                    paddingX: 8
                };
                
                const mm = Markmap.create(svgElement, options, root);
                console.log('Markmap instance created successfully.');
                
                // Fit to view
                setTimeout(() => {
                    if (mm.fit) mm.fit();
                }, 100);
                
                if (panZoom && svgElement.querySelector('g')) {
                    try {
                        const pz = panZoom(svgElement.querySelector('g'));
                        console.log('Pan and zoom enabled.');
                    } catch (panZoomError) {
                        console.warn('PanZoom failed:', panZoomError);
                    }
                } else {
                    console.warn('PanZoom function not available or no SVG group found.');
                }
                
            } catch (error) {
                console.error('‚ùå Error rendering mindmap:', error);
                console.error('Error stack:', error.stack);
                
                // Hi·ªÉn th·ªã l·ªói chi ti·∫øt h∆°n
                let errorMessage = error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh.';
                if (error.message.includes('Markdown')) {
                    errorMessage += ' C·∫•u tr√∫c Markdown c√≥ v·∫•n ƒë·ªÅ.';
                }
                
                svgElement.innerHTML = \`
                    <foreignObject width="100%" height="100%">
                         <body xmlns="http://www.w3.org/1999/xhtml">
                             <div class="loading-error">
                                 <strong>L·ªói khi v·∫Ω s∆° ƒë·ªì:</strong><br/>
                                 \${errorMessage}<br/>
                                 <small style="margin-top: 10px; display: block;">
                                     <strong>Debug info:</strong><br/>
                                     Content length: \${markdownContent.length}<br/>
                                     Check console for details.
                                 </small>
                             </div>
                         </body>
                     </foreignObject>
                \`;
            }
        }

        function downloadMindmap() {
            try { 
                const svg = document.getElementById('mindmap'); 
                if (!svg) throw new Error('SVG element not found.'); 
                const g = svg.querySelector('g'); 
                if (!g) throw new Error('Mindmap group element not found.'); 
                const svgData = new XMLSerializer().serializeToString(svg); 
                const bbox = g.getBBox ? g.getBBox() : { x: 0, y: 0, width: svg.clientWidth || 800, height: svg.clientHeight || 600 }; 
                const padding = 20; 
                const canvas = document.createElement('canvas'); 
                canvas.width = Math.max(bbox.width + padding * 2, svg.clientWidth || 800); 
                canvas.height = Math.max(bbox.height + padding * 2, svg.clientHeight || 600); 
                const ctx = canvas.getContext('2d'); 
                if (!ctx) throw new Error('Could not get canvas context.'); 
                ctx.fillStyle = '#FFFFFF'; 
                ctx.fillRect(0, 0, canvas.width, canvas.height); 
                const img = new Image(); 
                img.onload = function() { 
                    const scale = Math.min( 
                        (canvas.width - padding * 2) / bbox.width, 
                        (canvas.height - padding * 2) / bbox.height 
                    ); 
                    const drawWidth = bbox.width * scale; 
                    const drawHeight = bbox.height * scale; 
                    const drawX = (canvas.width - drawWidth) / 2 - bbox.x * scale; 
                    const drawY = (canvas.height - drawHeight) / 2 - bbox.y * scale; 
                    ctx.drawImage(img, drawX, drawY, drawWidth, drawHeight); 
                    try { 
                        const pngFile = canvas.toDataURL('image/png'); 
                        const downloadLink = document.createElement('a'); 
                        downloadLink.download = 'mindmap.png'; 
                        downloadLink.href = pngFile; 
                        document.body.appendChild(downloadLink); 
                        downloadLink.click(); 
                        document.body.removeChild(downloadLink); 
                    } catch (e) { 
                        console.error("Error generating or downloading PNG:", e); 
                        alert("L·ªói khi t·∫°o file PNG ƒë·ªÉ t·∫£i v·ªÅ."); 
                    } 
                }; 
                img.onerror = function(e) { 
                    console.error("Error loading SVG into Image:", e); 
                    alert("L·ªói khi t·∫£i d·ªØ li·ªáu s∆° ƒë·ªì ƒë·ªÉ chuy·ªÉn ƒë·ªïi sang ·∫£nh."); 
                } 
                const svgBase64 = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgData))); 
                img.src = svgBase64; 
            } catch (error) { 
                console.error('Error in downloadMindmap:', error); 
                alert('Kh√¥ng th·ªÉ t·∫£i s∆° ƒë·ªì d∆∞·ªõi d·∫°ng ·∫£nh: ' + error.message); 
            }
        }

        // Kh·ªüi t·∫°o khi trang load
        if (document.readyState === 'loading') { 
            document.addEventListener('DOMContentLoaded', initializeMarkmap); 
        } else { 
            initializeMarkmap(); 
        }
        
        // X·ª≠ l√Ω resize
        let resizeTimer; 
        window.addEventListener('resize', () => { 
            clearTimeout(resizeTimer); 
            resizeTimer = setTimeout(() => { 
                console.log('Window resized, re-rendering mindmap.'); 
                initializeMarkmap(); 
            }, 250); 
        });
    </script>
</body>
</html>`;
}

// ========== MAIN PROCESSING FUNCTION ==========
// (Gi·ªØ nguy√™n - ƒë√£ c·∫≠p nh·∫≠t logic aggregate/generate)
async function processDocument(jobId) {
  const job = jobs.get(jobId);
  if (!job || job.status !== 'pending') {
     console.warn(`Attempted to process job ${jobId} but its status is ${job?.status || 'not found'}.`);
    return;
  }

  console.log(`Processing document for job: ${jobId}`);
  job.status = 'processing';
  const sse = sseClients.get(jobId);

  try {
    sendSSE(sse, 'progress', { message: 'üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω t√†i li·ªáu...' });

    // Step 1: Extract text
    sendSSE(sse, 'progress', { message: 'üìÑ ƒêang tr√≠ch xu·∫•t vƒÉn b·∫£n...' });
    console.time(`extractText-${jobId}`);
    const extractedText = await extractTextSmart(job.buffer, job.mimeType, sse);
    console.timeEnd(`extractText-${jobId}`);

    if (!extractedText || typeof extractedText !== 'string' || extractedText.trim().length < 50) {
        const errorMsg = 'Kh√¥ng th·ªÉ tr√≠ch xu·∫•t ƒë·ªß n·ªôi dung t·ª´ t√†i li·ªáu. File c√≥ th·ªÉ tr·ªëng, b·ªã l·ªói ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß.';
        console.error(`Error for job ${jobId}: ${errorMsg}. Text length: ${extractedText?.length}`);
      throw new Error(errorMsg);
    }

    sendSSE(sse, 'progress', { message: `‚úÖ ƒê√£ tr√≠ch xu·∫•t ${extractedText.length} k√Ω t·ª±`, textLength: extractedText.length });
    console.log(`Job ${jobId}: Extracted ${extractedText.length} chars.`);
    job.buffer = null;
    console.log(`Job ${jobId}: Cleared file buffer from memory.`);

    // Step 2: Split into chunks
    const chunks = splitChunksSimple(extractedText, CHUNK_SIZE);
     if (chunks.length === 0) {
          throw new Error('N·ªôi dung tr√≠ch xu·∫•t kh√¥ng th·ªÉ chia th√†nh c√°c ph·∫ßn ƒë·ªÉ ph√¢n t√≠ch.');
      }
    sendSSE(sse, 'progress', { message: `üì¶ ƒê√£ chia th√†nh ${chunks.length} ph·∫ßn ƒë·ªÉ ph√¢n t√≠ch`, totalChunks: chunks.length });
    console.log(`Job ${jobId}: Split into ${chunks.length} chunks.`);

    // Step 3: Process each chunk
    const analyses = [];
    console.time(`analyzeChunks-${jobId}`);
    for (let i = 0; i < chunks.length; i++) {
        const progressData = {
            message: `ü§ñ ƒêang ph√¢n t√≠ch ph·∫ßn ${i + 1}/${chunks.length}...`,
            chunkCurrent: i + 1,
            totalChunks: chunks.length
        };
      sendSSE(sse, 'progress', progressData);
      console.log(`Job ${jobId}: ${progressData.message}`);

      const analysis = await analyzeChunkSimple(chunks[i], i, chunks.length);
      analyses.push(analysis);

       const chunkDoneData = {
            message: analysis.error ? `‚ö†Ô∏è L·ªói ph√¢n t√≠ch ph·∫ßn ${i + 1}` : `‚úÖ ƒê√£ ph√¢n t√≠ch ph·∫ßn ${i + 1}/${chunks.length}`,
            chunkCurrent: i + 1,
            totalChunks: chunks.length,
        };
       sendSSE(sse, 'progress', chunkDoneData);
       if(analysis.error) console.warn(`Job ${jobId}: ${chunkDoneData.message}`);

      if (i < chunks.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000)); // Delay
      }
    }
     console.timeEnd(`analyzeChunks-${jobId}`);

    // Step 4: Aggregate results
    sendSSE(sse, 'progress', { message: 'üìä ƒêang t·ªïng h·ª£p k·∫øt qu·∫£ JSON...' });
     console.log(`Job ${jobId}: Aggregating ${analyses.length} JSON analysis results.`);
     console.time(`aggregateJson-${jobId}`);
    const aggregatedJsonResult = aggregateJsonResults(analyses, chunks);
     console.timeEnd(`aggregateJson-${jobId}`);

     if (aggregatedJsonResult.error) {
         throw new Error(aggregatedJsonResult.summary || "L·ªói t·ªïng h·ª£p k·∫øt qu·∫£ ph√¢n t√≠ch JSON.");
     }

    sendSSE(sse, 'progress', { message: `üìä T·ªïng h·ª£p JSON xong. Ch·ªß ƒë·ªÅ ch√≠nh: ${aggregatedJsonResult.mainTopic}` });
    console.log(`Job ${jobId}: JSON Aggregation complete. Main topic: ${aggregatedJsonResult.mainTopic}`);

    // Step 5: Generate final mindmap markdown
    sendSSE(sse, 'progress', { message: 'üó∫Ô∏è ƒêang t·∫°o s∆° ƒë·ªì t∆∞ duy t·ª´ JSON...' });
     console.log(`Job ${jobId}: Generating final mindmap markdown from JSON...`);
     console.time(`generateMarkdown-${jobId}`);
    const mindmapMarkdown = generateMarkdownFromJson(aggregatedJsonResult);
     console.timeEnd(`generateMarkdown-${jobId}`);

    // Step 6: Finalize job state
    job.status = 'done';
    job.result = mindmapMarkdown;
    job.processingTime = Date.now() - job.startTime;
     job.stats = {
        totalChunks: chunks.length,
        processedChunks: aggregatedJsonResult.analyzedChunks,
        processingTime: job.processingTime,
        textLength: extractedText.length,
        mainTopic: aggregatedJsonResult.mainTopic
      };

    sendSSE(sse, 'complete', {
      markdown: mindmapMarkdown,
      visualizationUrl: `/upload/mindmap-visualization/${jobId}`,
      stats: job.stats
    });

    console.log(`‚úÖ Job ${jobId} completed successfully in ${job.processingTime}ms.`);

  } catch (error) {
    console.error(`‚ùå Processing failed for job ${jobId}:`, error);
    job.status = 'error';
    job.error = error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
    sendSSE(sse, 'error', { message: `L·ªói x·ª≠ l√Ω t√†i li·ªáu: ${job.error}` });
  } finally {
    console.log(`Job ${jobId}: Finalizing processing.`);
    try { if (sse && !sse.writableEnded) { console.log(`Job ${jobId}: Closing SSE stream.`); sse.end(); } }
    catch (e) { console.warn(`Job ${jobId}: Error closing SSE stream:`, e.message); }
    sseClients.delete(jobId);
    if (job && job.buffer) { job.buffer = null; console.log(`Job ${jobId}: Cleared buffer in finally block.`); }
    setTimeout(() => { if (jobs.has(jobId)) { console.log(`Job ${jobId}: Deleting job data from memory.`); jobs.delete(jobId); } }, 10 * 60 * 1000);
  }
}

// Default route for /upload
router.get('/', (req, res) => { res.redirect('/upload/page'); });
router.get('/mindmap-visualization/:jobId', authMiddleware.checkLoggedIn, (req, res) => {
  const { jobId } = req.params;
  const job = jobs.get(jobId); // L·∫•y job t·ª´ b·ªô nh·ªõ t·∫°m

  // Ki·ªÉm tra xem job c√≥ t·ªìn t·∫°i kh√¥ng
  if (!job) {
    console.warn(`[Visualization] Job not found in memory: ${jobId}`);
    return res.status(404).send(`
        <h1 style="font-family: sans-serif; color: #d9534f;">404 - Kh√¥ng t√¨m th·∫•y Job</h1>
        <p style="font-family: sans-serif;">Job ID n√†y kh√¥ng t·ªìn t·∫°i. 
        S∆° ƒë·ªì tr·ª±c quan ch·ªâ ƒë∆∞·ª£c l∆∞u t·∫°m th·ªùi, c√≥ th·ªÉ n√≥ ƒë√£ h·∫øt h·∫°n ho·∫∑c ch∆∞a t·ª´ng t·ªìn t·∫°i.</p>
        <a href="/upload/page">Quay l·∫°i trang t·∫£i l√™n</a>
    `);
  }

  // Ki·ªÉm tra xem job ƒë√£ x·ª≠ l√Ω xong v√† c√≥ k·∫øt qu·∫£ markdown ch∆∞a
  if (job.status !== 'done' || !job.result) {
    console.warn(`[Visualization] Job not complete: ${jobId}, status: ${job.status}`);
    return res.status(400).send(`
        <h1 style="font-family: sans-serif; color: #f0ad4e;">400 - Job ch∆∞a ho√†n th√†nh</h1>
        <p style="font-family: sans-serif;">Job n√†y ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω ho·∫∑c ƒë√£ g·∫∑p l·ªói trong qu√° tr√¨nh ph√¢n t√≠ch. 
        Vui l√≤ng th·ª≠ l·∫°i t·ª´ trang t·∫£i l√™n.</p>
        <a href="/upload/page">Quay l·∫°i trang t·∫£i l√™n</a>
    `);
  }

  // N·∫øu m·ªçi th·ª© OK, l·∫•y markdown v√† ti√™u ƒë·ªÅ
  const markdownContent = job.result;
  const pageTitle = job.stats?.mainTopic || job.filename || "S∆° ƒë·ªì t∆∞ duy";

  try {
    // S·ª≠ d·ª•ng h√†m generateMindmapHTML b·∫°n ƒë√£ c√≥ s·∫µn!
    const html = generateMindmapHTML(markdownContent, pageTitle);
    
    res.setHeader('Content-Type', 'text/html');
    res.send(html);
    
  } catch (error) {
    console.error(`[Visualization] Error generating HTML for job ${jobId}:`, error);
    res.status(500).send(`
        <h1 style="font-family: sans-serif; color: #d9534f;">500 - L·ªói Server</h1>
        <p style="font-family: sans-serif;">ƒê√£ x·∫£y ra l·ªói khi t·∫°o trang HTML cho s∆° ƒë·ªì t∆∞ duy.</p>
        <pre>${error.message}</pre>
    `);
  }
});
module.exports = router;