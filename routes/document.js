// routes/document.js
const express = require('express');
const router = express.Router();
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');
const pdf = require('pdf-parse');
const mammoth = require('mammoth');
const axios = require('axios');
const FormData = require('form-data');
const AdmZip = require('adm-zip');
const { GoogleGenerativeAI } = require("@google/generative-ai");
const { HfInference } = require('@huggingface/inference');
const authMiddleware = require('../middlewares/middlewares.js');
const documentController = require('../controllers/documentController.js');

const OCRSPACE_API_KEY = process.env.OCRSPACE_API_KEY;
const GEMINI_KEYS = (process.env.GEMINI_API_KEYS || '').split(',').map(k => k.trim()).filter(Boolean);
const HUGGINGFACE_TOKEN = process.env.HUGGINGFACE_TOKEN;
const CHUNK_SIZE = parseInt(process.env.CHUNK_SIZE || '8000', 10);

if (!OCRSPACE_API_KEY) console.warn("‚ö†Ô∏è OCRSPACE_API_KEY not set in .env ‚Äî OCR.Space calls will fail.");
if (GEMINI_KEYS.length === 0) console.warn("‚ö†Ô∏è GEMINI_API_KEYS not set.");
if (!HUGGINGFACE_TOKEN) console.warn("‚ö†Ô∏è HUGGINGFACE_TOKEN not set in .env ‚Äî Hugging Face calls will fail.");

// Kh·ªüi t·∫°o Hugging Face client
const hf = HUGGINGFACE_TOKEN ? new HfInference(HUGGINGFACE_TOKEN) : null;

const keyManager = {
  keys: GEMINI_KEYS,
  index: 0,
  next() {
    if (!this.keys || this.keys.length === 0) return null;
    const k = this.keys[this.index];
    this.index = (this.index + 1) % this.keys.length;
    return k;
  }
};

// ========== HUGGING FACE FUNCTION - VJP H∆†N V·ªöI INSTRUCTION MODELS ==========
// S·ª¨A ƒê·ªîI: S·ª≠ d·ª•ng c√°c model instruction-tuned thay v√¨ model conversational.
async function generateWithHuggingFace(prompt, maxRetries = 2) {
    if (!HUGGINGFACE_TOKEN) {
        throw new Error("HUGGINGFACE_TOKEN not configured.");
    }

    // S·ª¨A ƒê·ªîI: Thay th·∫ø DialoGPT/gpt2 b·∫±ng c√°c model instruction-tuned
    // Nh·ªØng model n√†y hi·ªÉu v√† tu√¢n theo y√™u c·∫ßu tr·∫£ v·ªÅ JSON t·ªët h∆°n nhi·ªÅu.
    const models = [
        "mistralai/Mistral-7B-Instruct-v0.2", // Model instruction-tuned r·∫•t t·ªët
        "google/gemma-2b-it" // Model instruction-tuned nh·ªè h∆°n
    ];

    for (let attempt = 0; attempt < maxRetries; attempt++) {
        const model = models[attempt] || models[0];
        
        try {
            console.log(`ü§ó Attempt ${attempt + 1} with Hugging Face model: ${model}`);
            
            const response = await axios.post(
                `https://api-inference.huggingface.co/models/${model}`,
                {
                    inputs: prompt,
                    parameters: {
                        max_new_tokens: 2048, // TƒÉng nh·∫π
                        temperature: 0.1,
                        do_sample: false, // T·∫Øt sample ƒë·ªÉ AI tu√¢n th·ªß ch·ªâ d·∫´n
                        return_full_text: false
                    }
                },
                {
                    headers: {
                        Authorization: `Bearer ${HUGGINGFACE_TOKEN}`,
                        "Content-Type": "application/json",
                    },
                    timeout: 45000 // TƒÉng timeout cho c√°c model l·ªõn h∆°n
                }
            );

            if (response.data.error) {
                throw new Error(response.data.error);
            }

            // L∆∞u √Ω: response.data[0]?.generated_text c√≥ th·ªÉ v·∫´n ch·ª©a prompt, 
            // nh∆∞ng logic `extractJson` m·ªõi s·∫Ω x·ª≠ l√Ω
            console.log(`‚úì Hugging Face API call successful with model ${model}`);
            return { generated_text: response.data[0]?.generated_text || "" };

        } catch (error) {
            console.warn(`‚ùå Hugging Face attempt ${attempt + 1} failed:`, error.message);
            
            if (attempt < maxRetries - 1) {
                console.log(`üîÑ Trying next model...`);
                await new Promise(resolve => setTimeout(resolve, 2000));
            } else {
                throw new Error(`Hugging Face API failed: ${error.message}`);
            }
        }
    }
}

// ========== AI FUNCTION v·ªõi MULTI-MODEL FALLBACK - OPTIMIZED ==========
async function generateWithRetry(prompt, maxRetries = 3) {
  if (!keyManager.keys || keyManager.keys.length === 0) {
    // Th·ª≠ Hugging Face n·∫øu kh√¥ng c√≥ Gemini keys
    if (hf) {
      console.log("üîÑ No Gemini keys available, trying Hugging Face...");
      try {
        const hfResult = await generateWithHuggingFace(prompt);
        return { 
          response: {
            candidates: [{
              content: {
                parts: [{ text: hfResult.generated_text }]
              }
            }]
          }
        };
      } catch (hfError) {
        throw new Error("No AI services available: " + hfError.message);
      }
    }
    throw new Error("No Gemini API keys configured.");
  }

  // Danh s√°ch model theo th·ª© t·ª± ∆∞u ti√™n (Kh√¥ng ƒë·ªïi)
  const models = ["gemini-2.5-pro", "gemini-2.5-flash", "gemini-2.0-flash"];
  let lastError = null;

  for (let attempt = 0; attempt < maxRetries; attempt++) {
    const key = keyManager.next();
    const selectedModel = models[attempt % models.length]; // Lu√¢n phi√™n model

    try {
      const genAI = new GoogleGenerativeAI(key);
      const model = genAI.getGenerativeModel({
        model: selectedModel,
        generationConfig: {
          temperature: 0.1,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 8192,
          responseMimeType: "application/json",
        }
      });

      console.log(`Attempt ${attempt + 1} with model ${selectedModel} and key ending in ${key.slice(-4)}...`);

      const result = await model.generateContent(prompt);
      console.log(`‚úì Attempt ${attempt + 1} successful with model ${selectedModel}.`);
      return result;

    } catch (error) {
      lastError = error;
      const errorMessage = error?.response?.data?.error?.message || error?.message || String(error);
      
      console.warn(`‚ùå Attempt ${attempt + 1} failed with model ${selectedModel}:`, errorMessage);

      // Gi·∫£m delay: ch·ªâ 1-3 gi√¢y thay v√¨ 3-7 gi√¢y
      if (attempt < maxRetries - 1) {
        const delay = Math.min(1000 + (attempt * 500), 3000);
        console.log(`Waiting ${delay/1000} seconds before retry...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }

  // Hugging Face fallback v·ªõi timeout ng·∫Øn h∆°n
  if (hf) {
    console.log("üîÑ All Gemini attempts failed, trying Hugging Face as fallback...");
    try {
      const hfResult = await generateWithHuggingFace(prompt);
      return { 
        response: {
          candidates: [{
            content: {
              parts: [{ text: hfResult.generated_text }]
            }
          }]
        }
      };
    } catch (hfError) {
      console.error("Hugging Face fallback also failed:", hfError.message);
    }
  }

  throw new Error(`AI API call failed after ${maxRetries} attempts: ${lastError?.message || 'Unknown API error'}`);
}

// ========== TEXT EXTRACTION ==========
async function extractTextSmart(buffer, mimeType, sseRes) {
  console.log("üîç Extracting text from:", mimeType);
  sendSSE(sseRes, 'progress', { message: `üîç B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t t·ª´ ${mimeType}...` });

  if (mimeType === 'application/pdf') {
    try {
      const data = await pdf(buffer, { max: -1 });
      const text = data.text?.trim() || '';
      if (!text) throw new Error("Extracted PDF text is empty or pdf-parse failed.");

      sendSSE(sseRes, 'progress', { message: `‚úì ƒê√£ tr√≠ch xu·∫•t ${text.length} k√Ω t·ª± t·ª´ PDF` });
      console.log(`‚úì Successfully extracted ${text.length} characters from PDF.`);
      return text;

    } catch (error) {
      console.warn("PDF extraction failed:", error.message);
      sendSSE(sseRes, 'progress', { message: 'üîÑ Tr√≠ch xu·∫•t PDF th·∫•t b·∫°i, th·ª≠ s·ª≠ d·ª•ng OCR...' });

      try {
        const ocrText = await runOcrSpaceFull(buffer, mimeType);
        if (!ocrText) throw new Error("OCR text for PDF is empty.");
        console.log(`‚úì Successfully extracted ${ocrText.length} characters from PDF via OCR.`);
        sendSSE(sseRes, 'progress', { message: `‚úì ƒê√£ tr√≠ch xu·∫•t ${ocrText.length} k√Ω t·ª± t·ª´ PDF b·∫±ng OCR` });
        return ocrText;
      } catch (ocrError) {
        console.error("OCR for PDF also failed:", ocrError.message);
        sendSSE(sseRes, 'error', { message: `L·ªói OCR PDF: ${ocrError.message}` });
        throw new Error(`Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ PDF b·∫±ng c·∫£ hai ph∆∞∆°ng ph√°p: ${ocrError.message}`);
      }
    }
  }

  if (mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
    try {
      const { value } = await mammoth.extractRawText({ buffer });
      const text = value?.trim() || '';
      if (!text) throw new Error("Extracted DOCX text is empty.");
      sendSSE(sseRes, 'progress', { message: `‚úì ƒê√£ tr√≠ch xu·∫•t ${text.length} k√Ω t·ª± t·ª´ DOCX` });
      console.log(`‚úì Successfully extracted ${text.length} characters from DOCX.`);
      return text;
    } catch (error) {
      console.error("DOCX extraction failed:", error.message);
      sendSSE(sseRes, 'error', { message: `L·ªói tr√≠ch xu·∫•t DOCX: ${error.message}` });
      throw new Error(`Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ DOCX: ${error.message}`);
    }
  }

  if (mimeType === 'text/plain') {
    try {
      const text = buffer.toString('utf8').trim();
      if (!text) throw new Error("Extracted TXT text is empty.");
      sendSSE(sseRes, 'progress', { message: `‚úì ƒê√£ tr√≠ch xu·∫•t ${text.length} k√Ω t·ª± t·ª´ TXT` });
      console.log(`‚úì Successfully extracted ${text.length} characters from TXT.`);
      return text;
    } catch (error) {
      console.error("TXT extraction failed:", error.message);
      sendSSE(sseRes, 'error', { message: `L·ªói ƒë·ªçc file TXT: ${error.message}` });
      throw new Error(`Kh√¥ng th·ªÉ ƒë·ªçc file TXT: ${error.message}`);
    }
  }

  if (mimeType.startsWith('image/')) {
    console.log(`Attempting OCR for image type: ${mimeType}`);
    sendSSE(sseRes, 'progress', { message: 'üîÑ ƒêang x·ª≠ l√Ω h√¨nh ·∫£nh v·ªõi OCR...' });
    try {
      const ocrText = await runOcrSpaceFull(buffer, mimeType);
      if (!ocrText) throw new Error("OCR text for image is empty.");
      console.log(`‚úì Successfully extracted ${ocrText.length} characters from image via OCR.`);
      sendSSE(sseRes, 'progress', { message: `‚úì ƒê√£ tr√≠ch xu·∫•t ${ocrText.length} k√Ω t·ª± ·∫£nh b·∫±ng OCR` });
      return ocrText;
    } catch (error) {
      console.error("Image OCR failed:", error.message);
      sendSSE(sseRes, 'error', { message: `L·ªói OCR ·∫£nh: ${error.message}` });
      throw new Error(`Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ ·∫£nh b·∫±ng OCR: ${error.message}`);
    }
  }

  console.error(`Unsupported or unknown file type: ${mimeType || 'unknown'}`);
  sendSSE(sseRes, 'error', { message: `ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ho·∫∑c kh√¥ng x√°c ƒë·ªãnh: ${mimeType || 'unknown'}` });
  throw new Error(`ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ho·∫∑c kh√¥ng x√°c ƒë·ªãnh: ${mimeType || 'unknown'}`);
}

// ========== CHUNK PROCESSING ==========
function splitChunksSimple(text, size = CHUNK_SIZE) {
  if (!text || text.length === 0) return [];

  const chunks = [];
  let currentPos = 0;
  while (currentPos < text.length) {
    let endPos = Math.min(currentPos + size, text.length);
    if (endPos < text.length) {
        let breakPos = text.lastIndexOf('\n', endPos);
        if (breakPos <= currentPos) breakPos = text.lastIndexOf('.', endPos);
        if (breakPos > currentPos + size / 2) {
            endPos = breakPos + 1;
        }
    }
    chunks.push(text.slice(currentPos, endPos));
    currentPos = endPos;
  }

  console.log(`Split text (${text.length} chars) into ${chunks.length} chunks of size ~${size}.`);
  return chunks;
}

// ========== JSON EXTRACTION FUNCTION (M·ªöI) ==========
/**
 * Tr√≠ch xu·∫•t m·ªôt chu·ªói JSON t·ª´ vƒÉn b·∫£n tr·∫£ v·ªÅ c·ªßa AI, 
 * ngay c·∫£ khi c√≥ vƒÉn b·∫£n r√°c (markdown, gi·∫£i th√≠ch) bao quanh.
 * @param {string} text - VƒÉn b·∫£n th√¥ t·ª´ AI.
 * @returns {object|null} - ƒê·ªëi t∆∞·ª£ng JSON ƒë√£ parse ho·∫∑c null n·∫øu th·∫•t b·∫°i.
 */
function extractJson(text) {
  if (!text || typeof text !== 'string') return null;

  // T√¨m d·∫•u { ƒë·∫ßu ti√™n v√† d·∫•u } cu·ªëi c√πng
  const startIndex = text.indexOf('{');
  const endIndex = text.lastIndexOf('}');

  if (startIndex === -1 || endIndex === -1 || endIndex < startIndex) {
    console.warn(`[extractJson] Kh√¥ng t√¨m th·∫•y c·∫∑p d·∫•u {} h·ª£p l·ªá. Text: ${text.substring(0, 100)}...`);
    return null; // Kh√¥ng t√¨m th·∫•y JSON
  }

  const jsonString = text.substring(startIndex, endIndex + 1);
  
  try {
    // Th·ª≠ parse chu·ªói JSON ƒë√£ tr√≠ch xu·∫•t
    return JSON.parse(jsonString);
  } catch (e) {
    console.warn(`[extractJson] L·ªói parse JSON: ${e.message}. String: "${jsonString.substring(0, 200)}..."`);
    return null;
  }
}

// ========== JSON VALIDATION FUNCTION ==========
function validateJsonStructure(parsedJson) {
  return parsedJson && // Th√™m ki·ªÉm tra null/undefined
         typeof parsedJson === 'object' && // ƒê·∫£m b·∫£o l√† object
         parsedJson.mainTopic && typeof parsedJson.mainTopic === 'string' &&
         Array.isArray(parsedJson.subTopics) &&
         parsedJson.summary && typeof parsedJson.summary === 'string' &&
         parsedJson.subTopics.every(sub =>
             sub && typeof sub.chapterTitle === 'string' && // Th√™m ki·ªÉm tra sub
             Array.isArray(sub.mainSections) &&
             sub.mainSections.every(main =>
                 main && typeof main.title === 'string' && // Th√™m ki·ªÉm tra main
                 Array.isArray(main.subsections) &&
                 (main.subsections.length > 0 ?
                     main.subsections.every(subsec =>
                         subsec && typeof subsec.subtitle === 'string' && // Th√™m ki·ªÉm tra subsec
                         Array.isArray(subsec.points) &&
                         subsec.points.length > 0 &&
                         subsec.points.every(p => typeof p === 'string' && p.trim() !== '')
                     ) :
                     (Array.isArray(main.points) && main.points.length > 0 && main.points.every(p => typeof p === 'string' && p.trim() !== '')))
         )
     );
}

// S·ª¨A ƒê·ªîI: D√πng h√†m `extractJson`
async function analyzeChunkSimple(chunk, chunkIndex, totalChunks) {
   console.log(`Analyzing chunk ${chunkIndex + 1}/${totalChunks}...`);

   const prompt = `Ph√¢n t√≠ch vƒÉn b·∫£n sau ƒë√¢y v√† tr√≠ch xu·∫•t c·∫•u tr√∫c chi ti·∫øt ƒë·ªÉ t·∫°o s∆° ƒë·ªì t∆∞ duy (mindmap).
X√°c ƒë·ªãnh ch·ªß ƒë·ªÅ ch√≠nh, c√°c ch·ªß ƒë·ªÅ ph·ª• v√† c√°c ƒëi·ªÉm ch√≠nh trong m·ªói ch·ªß ƒë·ªÅ ph·ª•.

‚ö†Ô∏è Y√äU C·∫¶U QUAN TR·ªåNG:
- Gi·ªØ nguy√™n h·ªá th·ªëng ƒë√°nh s·ªë, k√Ω hi·ªáu ƒë·ªÅ m·ª•c (Ch∆∞∆°ng, I, 1, a, ...) trong vƒÉn b·∫£n g·ªëc v√† ƒë∆∞a v√†o c√°c tr∆∞·ªùng 'chapterTitle', 'title', 'subtitle' t∆∞∆°ng ·ª©ng.
- N·∫øu trong vƒÉn b·∫£n g·ªëc c√≥ th·ª© t·ª± ƒë√°nh s·ªë, ph·∫£i gi·ªØ l·∫°i y nguy√™n trong ph·∫ßn 'chapterTitle', 'title', 'subtitle'.
- Ch·ªâ t√≥m t·∫Øt ng·∫Øn g·ªçn ph·∫ßn n·ªôi dung (points), KH√îNG ƒë∆∞·ª£c l∆∞·ª£c b·ªè ho·∫∑c thay ƒë·ªïi c·∫•u tr√∫c ƒë·ªÅ m·ª•c g·ªëc.
- ƒê·ªëi v·ªõi M·ªñI 'subtitle' (ho·∫∑c 'title' n·∫øu kh√¥ng c√≥ 'subtitle'), B·∫ÆT BU·ªòC ph·∫£i tr√≠ch xu·∫•t v√† t√≥m t·∫Øt 1-3 √Ω ch√≠nh, ƒë·ªãnh nghƒ©a, ho·∫∑c lu·∫≠n ƒëi·ªÉm quan tr·ªçng nh·∫•t t·ª´ n·ªôi dung vƒÉn b·∫£n n·∫±m d∆∞·ªõi ƒë·ªÅ m·ª•c ƒë√≥ v√†o m·∫£ng "points".
- M·∫£ng "points" PH·∫¢I ch·ª©a n·ªôi dung t√≥m t·∫Øt th·ª±c t·∫ø, KH√îNG ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng ho·∫∑c ch·ªâ ghi m√¥ t·∫£ chung chung (v√≠ d·ª•: KH√îNG ghi "Tr√¨nh b√†y v·ªÅ kh√°i ni·ªám" m√† ph·∫£i ghi "Kh√°i ni·ªám X l√†...") n·∫øu c√≥ n·ªôi dung trong vƒÉn b·∫£n g·ªëc.
- C·∫•u tr√∫c ƒë·∫ßu ra PH·∫¢I l√† m·ªôt ƒë·ªëi t∆∞·ª£ng JSON h·ª£p l·ªá duy nh·∫•t. Ph·∫£n h·ªìi CH·ªà ƒë∆∞·ª£c ch·ª©a ƒë·ªëi t∆∞·ª£ng JSON, tuy·ªát ƒë·ªëi KH√îNG c√≥ b·∫•t k·ª≥ k√Ω t·ª± n√†o tr∆∞·ªõc d·∫•u '{' m·ªü ƒë·∫ßu ho·∫∑c sau d·∫•u '}' k·∫øt th√∫c.
C·∫•u tr√∫c JSON m·∫´u (ph·∫£i theo ƒë√∫ng ƒë·ªãnh d·∫°ng n√†y):
{
  "mainTopic": "T√™n T√†i Li·ªáu Ho·∫∑c Ch·ªß ƒê·ªÅ Ch√≠nh (c·ªßa to√†n b·ªô t√†i li·ªáu)",
  "subTopics": [
    {
      "chapterTitle": "Ch∆∞∆°ng I: Gi·ªõi thi·ªáu t·ªïng quan",
      "mainSections": [
        {
          "title": "1. Kh√°i ni·ªám c∆° b·∫£n",
          "subsections": [
            { "subtitle": "1.1. ƒê·ªãnh nghƒ©a A", "points": ["ƒê·ªãnh nghƒ©a A l√† m·ªôt kh√°i ni·ªám quan tr·ªçng...", "N√≥ bao g·ªìm c√°c y·∫øu t·ªë..."] }
          ]
        },
        {
          "title": "2. M·ª•c kh√¥ng c√≥ subsection",
          "points": ["Vai tr√≤ ch√≠nh c·ªßa m·ª•c 2 l√†...", "C·∫ßn l∆∞u √Ω ƒëi·ªÉm..."],
          "subsections": []
        }
      ]
    }
  ],
  "summary": "T√≥m t·∫Øt chung v·ªÅ n·ªôi dung ch√≠nh trong PH·∫¶N VƒÇN B·∫¢N n√†y."
}

VƒÉn b·∫£n c·∫ßn ph√¢n t√≠ch:
---
${chunk}
---`;

  try {
    const result = await generateWithRetry(prompt);
     const candidate = result?.response?.candidates?.[0];
     if (candidate?.content?.parts?.[0]?.text) {
        
            // S·ª¨A ƒê·ªîI: S·ª≠ d·ª•ng h√†m extractJson ki√™n c∆∞·ªùng h∆°n
            const rawText = candidate.content.parts[0].text;
            const parsedJson = extractJson(rawText);

              if (parsedJson && validateJsonStructure(parsedJson)) {
                   console.log(`‚úì Successfully analyzed and validated chunk ${chunkIndex + 1} JSON structure. Topic: ${parsedJson.mainTopic}`);
                   // D·ªçn d·∫πp m·∫£ng points (t·ªët)
                    parsedJson.subTopics.forEach(sub => {
                      sub.mainSections.forEach(main => {
                          if (main.points) main.points = main.points.map(p => String(p).trim()).filter(Boolean);
                          main.subsections.forEach(subsec => {
                              subsec.points = subsec.points.map(p => String(p).trim()).filter(Boolean);
                          });
                      });
                  });
                 return parsedJson;
              } else if (parsedJson) {
                // ƒê√£ parse ƒë∆∞·ª£c JSON nh∆∞ng kh√¥ng ƒë√∫ng c·∫•u tr√∫c
                   console.warn(`‚ö†Ô∏è JSON structure validation failed for chunk ${chunkIndex + 1}. Parsed: ${JSON.stringify(parsedJson, null, 2)}`);
              } else {
                // Kh√¥ng th·ªÉ parse JSON t·ª´ rawText
                console.warn(`JSON parse error (expected JSON response) for chunk ${chunkIndex + 1}. Raw Response: "${rawText.substring(0, 300)}..."`);
            }
     } else {
         console.warn(`No valid JSON text found in AI response for chunk ${chunkIndex + 1}. Response: ${JSON.stringify(result?.response)}`);
     }

    console.log(`Falling back for chunk ${chunkIndex + 1}.`);
    return {
       mainTopic: `Ph·∫ßn ${chunkIndex + 1} (Fallback)`,
       subTopics: [],
       summary: `Kh√¥ng th·ªÉ ph√¢n t√≠ch chi ti·∫øt c·∫•u tr√∫c JSON cho ph·∫ßn n√†y. N·ªôi dung g·ªëc: ${chunk.substring(0, 200)}...`,
       fallback: true
    };

  } catch (error) {
    console.error(`‚ùå Analysis API call failed for chunk ${chunkIndex + 1}:`, error.message);
    return {
      mainTopic: `L·ªói ph√¢n t√≠ch ph·∫ßn ${chunkIndex + 1}`,
       subTopics: [],
       summary: `Kh√¥ng th·ªÉ ph√¢n t√≠ch n·ªôi dung do l·ªói g·ªçi API: ${error.message.substring(0, 100)}...`,
      error: true
    };
  }
}

// ========== OPTIMIZED CHUNK PROCESSING ==========
async function processSingleChunk(chunk, chunkIndex, totalChunks, sse) {
  const progressData = {
    message: `üîç Ph√¢n t√≠ch ph·∫ßn ${chunkIndex + 1}/${totalChunks}...`,
    chunkCurrent: chunkIndex + 1,
    totalChunks: totalChunks
  };
  sendSSE(sse, 'progress', progressData);
  console.log(`Job: ${progressData.message}`);

  try {
    const analysis = await analyzeChunkSimple(chunk, chunkIndex, totalChunks);
    
    const chunkDoneData = {
      message: analysis.error ? `‚ö†Ô∏è L·ªói ph√¢n t√≠ch ph·∫ßn ${chunkIndex + 1}` : `‚úÖ ƒê√£ ph√¢n t√≠ch ph·∫ßn ${chunkIndex + 1}/${totalChunks}`,
      chunkCurrent: chunkIndex + 1,
      totalChunks: totalChunks,
    };
    sendSSE(sse, 'progress', chunkDoneData);
    
    if (analysis.error) console.warn(`Chunk ${chunkIndex + 1} error: ${chunkDoneData.message}`);
    
    return analysis;
  } catch (error) {
    console.error(`‚ùå Error processing chunk ${chunkIndex + 1}:`, error);
    return {
      mainTopic: `L·ªói ph·∫ßn ${chunkIndex + 1}`,
      subTopics: [],
      summary: `L·ªói ph√¢n t√≠ch: ${error.message}`,
      error: true
    };
  }
}

// ========== MINDMAP STRUCTURE AGGREGATION & GENERATION (S·ª¨A ƒê·ªîI) ==========
function aggregateJsonResults(results, chunks) {
    console.log(`Aggregating results from ${results.length} JSON analyses (expected ${chunks.length}).`);
    const validResults = results.filter(r => r && !r.error && !r.fallback);

    if (validResults.length === 0) {
        console.warn("‚ö†Ô∏è No valid JSON analysis results to aggregate.");
        return {
            mainTopic: "L·ªói Ph√¢n T√≠ch T√†i Li·ªáu",
            subTopics: [{
                chapterTitle: "Th√¥ng B√°o L·ªói",
                mainSections: [{
                    title: "Kh√¥ng th·ªÉ ph√¢n t√≠ch",
                    points: [
                        `Kh√¥ng c√≥ ph·∫ßn n√†o c·ªßa t√†i li·ªáu ƒë∆∞·ª£c ph√¢n t√≠ch th√†nh c√¥ng theo c·∫•u tr√∫c y√™u c·∫ßu.`,
                        `T·ªïng s·ªë ph·∫ßn: ${chunks.length}`,
                        `S·ªë ph·∫ßn l·ªói/fallback: ${results.length}`
                    ],
                    subsections: []
                }]
            }],
            summary: "Qu√° tr√¨nh ph√¢n t√≠ch t√†i li·ªáu ƒë√£ g·∫∑p l·ªói nghi√™m tr·ªçng.",
            error: true
        };
    }

    // S·ª¨A ƒê·ªîI: ƒê·∫øm t·∫ßn su·∫•t mainTopic thay v√¨ ch·ªâ l·∫•y c√°i ƒë·∫ßu ti√™n
    const topicMap = new Map();
    let defaultTopic = "T·ªïng h·ª£p t√†i li·ªáu";

    validResults.forEach(r => {
        const topic = r.mainTopic ? r.mainTopic.trim() : defaultTopic;
        if (topic) {
            topicMap.set(topic, (topicMap.get(topic) || 0) + 1);
        }
    });

    let finalMainTopic = defaultTopic;
    let maxCount = 0;
    // N·∫øu c√≥ topic "T·ªïng h·ª£p t√†i li·ªáu", g√°n n√≥ l√†m m·∫∑c ƒë·ªãnh
    if (topicMap.has(defaultTopic)) {
        maxCount = topicMap.get(defaultTopic);
    }
    // T√¨m topic xu·∫•t hi·ªán nhi·ªÅu nh·∫•t
    for (const [topic, count] of topicMap.entries()) {
        if (count > maxCount && topic !== defaultTopic) {
            maxCount = count;
            finalMainTopic = topic;
        }
    }
    console.log(`[Aggregation] Chosen mainTopic: "${finalMainTopic}" (Count: ${maxCount}) from ${topicMap.size} topics.`);


    const combinedSummary = validResults.map(r => r.summary || '').filter(Boolean).join('\n\n');
    const allSubTopics = validResults.flatMap(r => r.subTopics || []);
    const groupedSubTopics = [];
    const chapterMap = new Map();

    allSubTopics.forEach(subTopic => {
        if (!subTopic) return; // B·ªè qua n·∫øu subTopic l√† null/undefined
        const chapterKey = subTopic.chapterTitle || "Ch∆∞∆°ng kh√¥ng x√°c ƒë·ªãnh";
        if (!chapterMap.has(chapterKey)) {
            chapterMap.set(chapterKey, { chapterTitle: chapterKey, mainSections: [] });
            groupedSubTopics.push(chapterMap.get(chapterKey));
        }
        const currentChapter = chapterMap.get(chapterKey);
        (subTopic.mainSections || []).forEach(mainSection => {
            if (!mainSection || !mainSection.title) return; // B·ªè qua n·∫øu mainSection kh√¥ng h·ª£p l·ªá
            if (!currentChapter.mainSections.some(existing => existing.title === mainSection.title)) {
                currentChapter.mainSections.push(mainSection);
            } else {
                 console.warn(`Duplicate mainSection title found and skipped: "${mainSection.title}" in chapter "${chapterKey}"`);
            }
        });
    });

     console.log(`Aggregated into ${groupedSubTopics.length} chapters/subtopics.`);

    return {
        mainTopic: finalMainTopic,
        subTopics: groupedSubTopics,
        summary: combinedSummary || "Kh√¥ng c√≥ t√≥m t·∫Øt t·ªïng h·ª£p.",
        totalChunks: chunks.length,
        analyzedChunks: validResults.length
    };
}

function generateMarkdownFromJson(aggregatedJson) {
    console.log("Generating final Markdown from aggregated JSON structure...");
    
    if (aggregatedJson.error) {
        console.warn("‚ö†Ô∏è Aggregated JSON indicates error. Generating error Markdown.");
        return `# ${aggregatedJson.mainTopic}\n\n## L·ªói ph√¢n t√≠ch\n\n${aggregatedJson.summary || 'Kh√¥ng th·ªÉ ph√¢n t√≠ch t√†i li·ªáu'}`;
    }

    let markdown = `# ${aggregatedJson.mainTopic}\n\n`;
    
    if (aggregatedJson.summary && aggregatedJson.summary.trim() !== '') {
        markdown += `> ${aggregatedJson.summary}\n\n`;
    }

    // Duy·ªát qua c√°c ch·ªß ƒë·ªÅ ph·ª•
    (aggregatedJson.subTopics || []).forEach(subTopic => {
        if (!subTopic || !subTopic.chapterTitle) return;
        
        markdown += `## ${subTopic.chapterTitle}\n\n`;
        
        // Duy·ªát qua c√°c section ch√≠nh
        (subTopic.mainSections || []).forEach(mainSection => {
            if (!mainSection || !mainSection.title) return;
            
            markdown += `### ${mainSection.title}\n\n`;
            
            // X·ª≠ l√Ω subsections n·∫øu c√≥
            if (mainSection.subsections && mainSection.subsections.length > 0) {
                mainSection.subsections.forEach(subsection => {
                    if (!subsection || !subsection.subtitle) return;
                    
                    markdown += `#### ${subsection.subtitle}\n\n`;
                    
                    // Th√™m c√°c ƒëi·ªÉm
                    (subsection.points || []).forEach(point => {
                        if (point && point.trim() !== '') {
                            markdown += `- ${point.trim()}\n`;
                        }
                    });
                    markdown += '\n';
                });
            } 
            // X·ª≠ l√Ω points tr·ª±c ti·∫øp n·∫øu kh√¥ng c√≥ subsection
            else if (mainSection.points && mainSection.points.length > 0) {
                mainSection.points.forEach(point => {
                    if (point && point.trim() !== '') {
                        markdown += `- ${point.trim()}\n`;
                    }
                });
                markdown += '\n';
            } else {
                markdown += `- *Ch∆∞a c√≥ n·ªôi dung chi ti·∫øt*\n\n`;
            }
        });
    });

    // Th√™m th√¥ng tin t·ªïng h·ª£p n·∫øu c√≥ nhi·ªÅu chunks
    if (aggregatedJson.totalChunks > 1) {
        markdown += `---\n\n*T·ªïng h·ª£p t·ª´ ${aggregatedJson.analyzedChunks}/${aggregatedJson.totalChunks} ph·∫ßn n·ªôi dung.*`;
    }

    console.log("‚úì Successfully generated clean Markdown from JSON.");
    console.log("Markdown preview:", markdown.substring(0, 200) + "...");
    
    return markdown.trim();
}

// ========== OCR FUNCTIONS ==========
async function ocrSpaceParseBuffer(buffer, mimeType) { 
  if (!OCRSPACE_API_KEY) throw new Error("OCRSPACE_API_KEY not configured."); 
  const form = new FormData(); 
  form.append('apikey', OCRSPACE_API_KEY); 
  form.append('language', 'vie'); 
  form.append('isOverlayRequired', 'false'); 
  form.append('OCREngine', '2'); 
  form.append('scale', 'true'); 
  form.append('detectOrientation', 'true'); 
  form.append('file', buffer, { filename: `upload.${mimeType ? mimeType.split('/')[1] || 'bin' : 'bin'}` }); 
  console.log('Sending request to OCR.Space...'); 
  try { 
    const resp = await axios.post('https://api.ocr.space/parse/image', form, { headers: form.getHeaders(), timeout: 90000 }); 
    console.log('Received response from OCR.Space.'); 
    if (resp.data?.IsErroredOnProcessing) { 
      console.error('OCR.Space Processing Error:', resp.data.ErrorMessage.join ? resp.data.ErrorMessage.join('; ') : resp.data.ErrorMessage); 
    } 
    if (resp.data?.OCRExitCode !== 1) { 
      console.warn(`OCR.Space Exit Code: ${resp.data?.OCRExitCode}. Details might be in ErrorMessage.`); 
    } 
    return resp.data; 
  } catch (error) { 
    console.error("OCR.Space API request error:", error.message); 
    if (error.response) { 
      console.error("OCR.Space Response Status:", error.response.status); 
      console.error("OCR.Space Response Data:", error.response.data); 
    } 
    throw new Error(`L·ªói g·ªçi API OCR.Space: ${error.message}`); 
  } 
}

async function runOcrSpaceFull(buffer, mimeType) { 
  console.log("Running full OCR process..."); 
  const data = await ocrSpaceParseBuffer(buffer, mimeType); 
  if (data?.IsErroredOnProcessing || data?.OCRExitCode !== 1) { 
    const errorMessages = data?.ErrorMessage?.join ? data.ErrorMessage.join('; ') : (data?.ErrorMessage || "L·ªói x·ª≠ l√Ω OCR kh√¥ng x√°c ƒë·ªãnh"); 
    console.error(`OCR processing failed with exit code ${data?.OCRExitCode}. Errors: ${errorMessages}`); 
    throw new Error(errorMessages); 
  } 
  if (!data.ParsedResults || data.ParsedResults.length === 0) { 
    console.warn("OCR processed successfully but returned no parsed results."); 
    return ''; 
  } 
  const combinedText = data.ParsedResults.map(p => p.ParsedText || '').join('\n').trim(); 
  console.log(`OCR successful, extracted ${combinedText.length} characters.`); 
  return combinedText; 
}

// ========== MULTER & STORAGE ==========
const upload = multer({ 
  storage: multer.memoryStorage(), 
  limits: { fileSize: 50 * 1024 * 1024 }, // 50MB
  fileFilter: (req, file, cb) => { 
    const allowedTypes = ['application/pdf', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain', 'image/jpeg', 'image/png', 'image/gif']; 
    if (allowedTypes.includes(file.mimetype)) { 
      cb(null, true); 
    } else { 
      console.warn(`File rejected: Unsupported type ${file.mimetype}`); 
      cb(new Error(`Ch·ªâ ch·∫•p nh·∫≠n file PDF, DOCX, TXT, JPG, PNG, GIF.`)); 
    } 
  } 
});

// ========== JOB STORAGE (IN-MEMORY) ==========
// C·∫¢NH B√ÅO PRODUCTION: 
// L∆∞u job trong `Map` (b·ªô nh·ªõ server) ho·∫°t ƒë·ªông t·ªët khi ph√°t tri·ªÉn (development).
// Tuy nhi√™n, khi "ch·∫°y th·∫≠t" (production), n·∫øu server b·ªã restart, deploy, ho·∫∑c crash,
// t·∫•t c·∫£ c√°c job ƒëang ch·∫°y v√† ƒë√£ ho√†n th√†nh s·∫Ω b·ªã M·∫§T.
//
// GI·∫¢I PH√ÅP: S·ª≠ d·ª•ng m·ªôt h·ªá th·ªëng l∆∞u tr·ªØ b√™n ngo√†i nh∆∞ REDIS.
// - Redis c·ª±c k·ª≥ nhanh v√† l∆∞u tr·ªØ d·ªØ li·ªáu b·ªÅn b·ªâ.
// - B·∫°n c√≥ th·ªÉ d√πng `redis.set(jobId, jsonData, 'EX', 10 * 60)` ƒë·ªÉ job t·ª± ƒë·ªông 
//   h·∫øt h·∫°n sau 10 ph√∫t, thay th·∫ø cho `setTimeout` ƒë·ªÉ x√≥a job.
// - ƒêi·ªÅu n√†y cho ph√©p b·∫°n m·ªü r·ªông (scale) l√™n nhi·ªÅu server m√† kh√¥ng m·∫•t job.
const jobs = new Map();
const sseClients = new Map();

// ========== SSE FUNCTIONS ==========
function sendSSE(res, event, data) { 
  if (!res || res.writableEnded) { 
    if (res && res.writableEnded) { 
      console.warn(`Attempted to write to an already closed SSE stream for event: ${event}`); 
    } 
    return; 
  } 
  try { 
    res.write(`event: ${event}\ndata: ${JSON.stringify(data)}\n\n`); 
  } catch (e) { 
    console.error(`‚ùå Failed to send SSE event '${event}':`, e.message); 
    try { res.end(); } catch (closeErr) {} 
    sseClients.delete(findJobIdByResponse(res)); 
  } 
}

function findJobIdByResponse(res) { 
  for (let [jobId, clientRes] of sseClients.entries()) { 
    if (clientRes === res) { 
      return jobId; 
    } 
  } 
  return null; 
}

// ========== ROUTES ==========
router.get('/page', authMiddleware.checkLoggedIn, documentController.getUploadPage);

router.post('/start-summarize', authMiddleware.checkLoggedIn, upload.single('documentFile'), (req, res, next) => { 
  if (!req.file) { 
    console.log("Upload failed: No file received."); 
    return res.status(400).json({ error: 'Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c t·∫£i l√™n.' }); 
  } 
  console.log(`Received file: ${req.file.originalname}, Type: ${req.file.mimetype}, Size: ${req.file.size}`); 
  const jobId = uuidv4(); 
  jobs.set(jobId, { 
    id: jobId, 
    status: 'pending', 
    buffer: req.file.buffer, // Buffer ƒë∆∞·ª£c l∆∞u t·∫°m th·ªùi
    mimeType: req.file.mimetype, 
    filename: req.file.originalname, 
    results: [], 
    startTime: Date.now() 
  }); 
  console.log(`Job created: ${jobId} for file ${req.file.originalname}`); 
  res.status(202).json({ jobId }); 
}, (err, req, res, next) => { 
  console.error("Multer Upload Error:", err.message); 
  if (err instanceof multer.MulterError) { 
    if (err.code === 'LIMIT_FILE_SIZE') { 
      return res.status(400).json({ error: `File qu√° l·ªõn, t·ªëi ƒëa 50MB.` }); 
    } 
    return res.status(400).json({ error: `L·ªói t·∫£i file: ${err.message}` }); 
  } else if (err) { 
    if (err.message.includes('Ch·ªâ ch·∫•p nh·∫≠n file')) { 
      return res.status(400).json({ error: err.message }); 
    } 
    return res.status(500).json({ error: `L·ªói server kh√¥ng x√°c ƒë·ªãnh khi t·∫£i file: ${err.message}` }); 
  } 
  next(); 
});

router.get('/summarize-stream', authMiddleware.checkLoggedIn, (req, res) => { 
  const { jobId } = req.query; 
  const job = jobs.get(jobId); 
  if (!jobId || !job) { 
    console.log(`SSE connection failed: Job ${jobId} not found.`); 
    return res.status(404).send('Job not found or expired.'); 
  } 
  console.log(`SSE client connected for job: ${jobId}`); 
  res.writeHead(200, { 
    'Content-Type': 'text/event-stream', 
    'Cache-Control': 'no-cache', 
    'Connection': 'keep-alive', 
    'Access-Control-Allow-Origin': '*', 
  }); 
  sseClients.set(jobId, res); 
  req.on('close', () => { 
    console.log(`SSE client disconnected for job: ${jobId}`); 
    sseClients.delete(jobId); 
    const currentJob = jobs.get(jobId); 
    if (currentJob && (currentJob.status === 'processing' || currentJob.status === 'pending')) { 
      console.log(`Job ${jobId} still processing after client disconnect.`); 
    } 
    if (!res.writableEnded) { 
      res.end(); 
    } 
  }); 
  if (job.status === 'pending') { 
    console.log(`Starting processing for pending job: ${jobId}`); 
    processDocument(jobId).catch(error => { 
      console.error(`‚ùå CRITICAL: Uncaught error starting processDocument for ${jobId}:`, error); 
      sendSSE(sseClients.get(jobId), 'error', { message: `L·ªói nghi√™m tr·ªçng khi b·∫Øt ƒë·∫ßu x·ª≠ l√Ω: ${error.message}` }); 
      if (sseClients.has(jobId)) { 
        try { sseClients.get(jobId).end(); } catch (e) {} 
        sseClients.delete(jobId); 
      } 
      if (jobs.has(jobId)) { 
        const jobToError = jobs.get(jobId);
          jobToError.status = 'error'; 
        jobToError.error = `L·ªói nghi√™m tr·ªçng: ${error.message}`; 
        jobToError.buffer = null; // D·ªçn d·∫πp buffer
      } 
    }); 
  } else { 
    console.log(`Job ${jobId} status is already '${job.status}'. Sending final status.`); 
    if (job.status === 'done') { 
      sendSSE(res, 'complete', { 
        markdown: job.result, 
        visualizationUrl: `/upload/mindmap-visualization/${jobId}`, 
        stats: job.stats || {} 
      }); 
      res.end(); 
    } else if (job.status === 'error') { 
      sendSSE(res, 'error', { message: `L·ªói x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥: ${job.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}` }); 
      res.end(); 
    } 
  } 
});

// ========== MAIN PROCESSING FUNCTION - OPTIMIZED ==========
async function processDocument(jobId) {
  const job = jobs.get(jobId);
  if (!job || job.status !== 'pending') {
    console.warn(`Attempted to process job ${jobId} but its status is ${job?.status || 'not found'}.`);
    return;
  }

  console.log(`Processing document for job: ${jobId}`);
  job.status = 'processing';
  const sse = sseClients.get(jobId);
  let extractedText = null; // Khai b√°o ·ªü scope ngo√†i

  try {
    sendSSE(sse, 'progress', { message: 'üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω t√†i li·ªáu...' });

    // Step 1: Extract text
    sendSSE(sse, 'progress', { message: 'üìÑ ƒêang tr√≠ch xu·∫•t vƒÉn b·∫£n...' });
    console.time(`extractText-${jobId}`);
    extractedText = await extractTextSmart(job.buffer, job.mimeType, sse);
    console.timeEnd(`extractText-${jobId}`);
    
    // D·ªçn d·∫πp buffer ngay sau khi tr√≠ch xu·∫•t xong
    job.buffer = null; 
    console.log(`Job ${jobId}: Cleared file buffer from memory.`);

    if (!extractedText || typeof extractedText !== 'string' || extractedText.trim().length < 50) {
      const errorMsg = 'Kh√¥ng th·ªÉ tr√≠ch xu·∫•t ƒë·ªß n·ªôi dung t·ª´ t√†i li·ªáu. File c√≥ th·ªÉ tr·ªëng, b·ªã l·ªói ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß.';
      console.error(`Error for job ${jobId}: ${errorMsg}. Text length: ${extractedText?.length}`);
      throw new Error(errorMsg);
    }

    sendSSE(sse, 'progress', { message: `‚úÖ ƒê√£ tr√≠ch xu·∫•t ${extractedText.length} k√Ω t·ª±`, textLength: extractedText.length });
    console.log(`Job ${jobId}: Extracted ${extractedText.length} chars.`);

    // Step 2: Split into chunks
    const chunks = splitChunksSimple(extractedText, CHUNK_SIZE);
    if (chunks.length === 0) {
      throw new Error('N·ªôi dung tr√≠ch xu·∫•t kh√¥ng th·ªÉ chia th√†nh c√°c ph·∫ßn ƒë·ªÉ ph√¢n t√≠ch.');
    }
    sendSSE(sse, 'progress', { message: `üì¶ ƒê√£ chia th√†nh ${chunks.length} ph·∫ßn ƒë·ªÉ ph√¢n t√≠ch`, totalChunks: chunks.length });
    console.log(`Job ${jobId}: Split into ${chunks.length} chunks.`);

    // Step 3: Process chunks v·ªõi PARALLEL PROCESSING v√† RATE LIMITING
    sendSSE(sse, 'progress', { message: `ü§ñ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch ${chunks.length} ph·∫ßn (x·ª≠ l√Ω song song)...` });
    
    const analyses = [];
    console.time(`analyzeChunks-${jobId}`);
    
    // X·ª≠ l√Ω song song v·ªõi gi·ªõi h·∫°n concurrent requests
    const CONCURRENT_LIMIT = 3; 
    const BATCH_DELAY = 500; 
    
    for (let i = 0; i < chunks.length; i += CONCURRENT_LIMIT) {
      const batch = chunks.slice(i, i + CONCURRENT_LIMIT);
      const batchPromises = batch.map((chunk, batchIndex) => {
        const chunkIndex = i + batchIndex;
        return processSingleChunk(chunk, chunkIndex, chunks.length, sse);
      });

      // X·ª≠ l√Ω batch hi·ªán t·∫°i song song
      const batchResults = await Promise.allSettled(batchPromises);
      analyses.push(...batchResults.map(result => 
        result.status === 'fulfilled' ? result.value : {
          mainTopic: `L·ªói ph·∫ßn ${i + (batchResults.findIndex(r => r === result)) || 0}`, // C·ªë g·∫Øng l·∫•y index
          subTopics: [],
          summary: `L·ªói ph√¢n t√≠ch: ${result.reason?.message || 'Unknown error'}`,
          error: true
        }
      ));

      // Progress update sau m·ªói batch
      const progressData = {
        message: `üìä ƒê√£ x·ª≠ l√Ω ${Math.min(i + CONCURRENT_LIMIT, chunks.length)}/${chunks.length} ph·∫ßn`,
        chunkCurrent: Math.min(i + CONCURRENT_LIMIT, chunks.length),
        totalChunks: chunks.length
      };
      sendSSE(sse, 'progress', progressData);

      // Delay ng·∫Øn gi·ªØa c√°c batch
      if (i + CONCURRENT_LIMIT < chunks.length) {
        await new Promise(resolve => setTimeout(resolve, BATCH_DELAY));
      }
    }
    
    console.timeEnd(`analyzeChunks-${jobId}`);

    // Step 4: Aggregate results
    sendSSE(sse, 'progress', { message: 'üìä ƒêang t·ªïng h·ª£p k·∫øt qu·∫£ JSON...' });
    console.log(`Job ${jobId}: Aggregating ${analyses.length} JSON analysis results.`);
    console.time(`aggregateJson-${jobId}`);
    const aggregatedJsonResult = aggregateJsonResults(analyses, chunks);
    console.timeEnd(`aggregateJson-${jobId}`);

    if (aggregatedJsonResult.error) {
      throw new Error(aggregatedJsonResult.summary || "L·ªói t·ªïng h·ª£p k·∫øt qu·∫£ ph√¢n t√≠ch JSON.");
    }

    sendSSE(sse, 'progress', { message: `üìä T·ªïng h·ª£p JSON xong. Ch·ªß ƒë·ªÅ ch√≠nh: ${aggregatedJsonResult.mainTopic}` });
    console.log(`Job ${jobId}: JSON Aggregation complete. Main topic: ${aggregatedJsonResult.mainTopic}`);

    // Step 5: Generate final mindmap markdown
    sendSSE(sse, 'progress', { message: 'üó∫Ô∏è ƒêang t·∫°o s∆° ƒë·ªì t∆∞ duy t·ª´ JSON...' });
    console.log(`Job ${jobId}: Generating final mindmap markdown from JSON...`);
    console.time(`generateMarkdown-${jobId}`);
    const mindmapMarkdown = generateMarkdownFromJson(aggregatedJsonResult);
    console.timeEnd(`generateMarkdown-${jobId}`);

    // Step 6: Finalize job state
    job.status = 'done';
    job.result = mindmapMarkdown; // L∆∞u k·∫øt qu·∫£ Markdown
    job.processingTime = Date.now() - job.startTime;
    job.stats = {
      totalChunks: chunks.length,
      processedChunks: aggregatedJsonResult.analyzedChunks,
      processingTime: job.processingTime,
      textLength: extractedText.length,
      mainTopic: aggregatedJsonResult.mainTopic
    };

    sendSSE(sse, 'complete', {
      markdown: mindmapMarkdown,
      visualizationUrl: `/upload/mindmap-visualization/${jobId}`,
      stats: job.stats
    });

    console.log(`‚úÖ Job ${jobId} completed successfully in ${job.processingTime}ms.`);

  } catch (error) {
    console.error(`‚ùå Processing failed for job ${jobId}:`, error);
    job.status = 'error';
    job.error = error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
    sendSSE(sse, 'error', { message: `L·ªói x·ª≠ l√Ω t√†i li·ªáu: ${job.error}` });
  } finally {
    console.log(`Job ${jobId}: Finalizing processing.`);
    try { if (sse && !sse.writableEnded) { console.log(`Job ${jobId}: Closing SSE stream.`); sse.end(); } }
    catch (e) { console.warn(`Job ${jobId}: Error closing SSE stream:`, e.message); }
    sseClients.delete(jobId);
    
    // ƒê·∫£m b·∫£o buffer ƒë√£ ƒë∆∞·ª£c d·ªçn d·∫πp
    if (job && job.buffer) { 
        job.buffer = null; 
        console.log(`Job ${jobId}: Cleared buffer in finally block.`); 
    }
    
    // ƒê·∫∑t l·ªãch x√≥a job kh·ªèi b·ªô nh·ªõ (quan tr·ªçng ƒë·ªÉ tr√°nh memory leak)
    setTimeout(() => { 
        if (jobs.has(jobId)) { 
            console.log(`Job ${jobId}: Deleting job data from memory.`); 
            jobs.delete(jobId); 
        } 
    }, 10 * 60 * 1000); // 10 ph√∫t sau khi x·ª≠ l√Ω xong
  }
}

// Default route for /upload
router.get('/', (req, res) => { res.redirect('/upload/page'); });

// Mindmap visualization route
router.get('/mindmap-visualization/:jobId', authMiddleware.checkLoggedIn, (req, res) => {
  const { jobId } = req.params;
  const job = jobs.get(jobId);

  if (!job) {
    console.warn(`[Visualization] Job not found in memory: ${jobId}`);
    return res.status(404).send(`
        <h1 style="font-family: sans-serif; color: #d9534f;">404 - Kh√¥ng t√¨m th·∫•y Job</h1>
        <p style="font-family: sans-serif;">Job ID n√†y kh√¥ng t·ªìn t·∫°i. 
        S∆° ƒë·ªì tr·ª±c quan ch·ªâ ƒë∆∞·ª£c l∆∞u t·∫°m th·ªùi, c√≥ th·ªÉ n√≥ ƒë√£ h·∫øt h·∫°n (sau 10 ph√∫t) ho·∫∑c ch∆∞a t·ª´ng t·ªìn t·∫°i.</p>
        <a href="/upload/page">Quay l·∫°i trang t·∫£i l√™n</a>
    `);
  }

  if (job.status !== 'done' || !job.result) {
    console.warn(`[Visualization] Job not complete: ${jobId}, status: ${job.status}`);
    return res.status(400).send(`
        <h1 style="font-family: sans-serif; color: #f0ad4e;">400 - Job ch∆∞a ho√†n th√†nh</h1>
        <p style="font-family: sans-serif;">Job n√†y ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω (${job.status}) ho·∫∑c ƒë√£ g·∫∑p l·ªói trong qu√° tr√¨nh ph√¢n t√≠ch. 
        ${job.error ? `<br/><strong>L·ªói:</strong> ${job.error}` : ''}
        </p>
        <a href="/upload/page">Quay l·∫°i trang t·∫£i l√™n</a>
    `);
  }

  const markdownContent = job.result;
  const pageTitle = job.stats?.mainTopic || job.filename || "S∆° ƒë·ªì t∆∞ duy";

  try {
    const html = generateMindmapHTML(markdownContent, pageTitle);
    res.setHeader('Content-Type', 'text/html');
    res.send(html);
    
  } catch (error) {
    console.error(`[Visualization] Error generating HTML for job ${jobId}:`, error);
    res.status(500).send(`
        <h1 style="font-family: sans-serif; color: #d9534f;">500 - L·ªói Server</h1>
        <p style="font-family: sans-serif;">ƒê√£ x·∫£y ra l·ªói khi t·∫°o trang HTML cho s∆° ƒë·ªì t∆∞ duy.</p>
        <pre>${error.message}</pre>
    `);
  }
});

// ========== MINDMAP VISUALIZATION HTML GENERATOR ==========
function generateMindmapHTML(markdownContent, title = "Mindmap Visualization") {
  // ƒê·∫£m b·∫£o markdownContent kh√¥ng r·ªóng v√† c√≥ ƒë·ªãnh d·∫°ng c∆° b·∫£n
  if (!markdownContent || markdownContent.trim() === '') {
    markdownContent = "# L·ªói\nN·ªôi dung Markdown tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá.";
  }

  // Chu·∫©n h√≥a Markdown - ƒë·∫£m b·∫£o c√≥ √≠t nh·∫•t m·ªôt ti√™u ƒë·ªÅ c·∫•p 1
  if (!markdownContent.includes('# ')) {
    markdownContent = `# ${title}\n\n${markdownContent}`;
  }

  const escapedMarkdown = markdownContent
      .replace(/\\/g, '\\\\')
      .replace(/`/g, '\\`')
      .replace(/\$\{/g, '\\${');

  return `
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <script src="https://cdn.jsdelivr.net/npm/d3@6.7.0"></script>
    <script src="https://cdn.jsdelivr.net/npm/markmap-view@0.2.7"></script>
    <script src="https://cdn.jsdelivr.net/npm/markmap-lib@0.11.6"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: #f4f7f6; min-height: 100vh; padding: 15px; }
        .container { max-width: 95%; margin: 15px auto; background: white; border-radius: 12px; box-shadow: 0 10px 30px rgba(0,0,0,0.08); overflow: hidden; display: flex; flex-direction: column; }
        .header { background: #4a69bd; color: white; padding: 20px 30px; text-align: center; border-bottom: 5px solid #3c5aa0; }
        .header h1 { font-size: 2em; margin-bottom: 5px; font-weight: 600; }
        .header p { font-size: 1em; opacity: 0.9; }
        .content { display: flex; flex: 1; min-height: 650px; }
        .markdown-panel { flex: 1; padding: 20px; background: #ffffff; border-right: 1px solid #e0e0e0; overflow-y: auto; max-height: 700px; display: flex; flex-direction: column; }
        .visualization-panel { flex: 2; padding: 20px; background: #fafafa; display: flex; flex-direction: column; }
        .panel-header { font-size: 1.1em; font-weight: 600; margin-bottom: 15px; color: #333; border-bottom: 2px solid #4a69bd; padding-bottom: 5px; }
        #mindmap { width: 100%; height: 100%; flex: 1; border: 1px solid #e0e0e0; border-radius: 8px; background: #fff; min-height: 500px; }
        .markdown-content { flex: 1; background: #f8f9fa; border: 1px solid #e0e0e0; padding: 20px; border-radius: 8px; font-family: 'Consolas', 'Monaco', monospace; font-size: 0.9em; line-height: 1.5; white-space: pre-wrap; word-wrap: break-word; overflow-y: auto; }
        .controls { padding: 15px 20px; background: #e9ecef; border-top: 1px solid #d6dbe0; display: flex; gap: 12px; justify-content: center; flex-wrap: wrap; }
        .btn { padding: 10px 20px; border: none; border-radius: 6px; font-size: 15px; font-weight: 500; cursor: pointer; transition: all 0.2s ease; text-decoration: none; display: inline-flex; align-items: center; gap: 6px; }
        .btn-primary { background-color: #007bff; color: white; }
        .btn-primary:hover { background-color: #0056b3; }
        .btn-secondary { background-color: #6c757d; color: white; }
        .btn-secondary:hover { background-color: #5a6268; }
        .loading-error { display: flex; justify-content: center; align-items: center; height: 100%; font-size: 16px; color: #6c757d; padding: 20px; text-align: center; }
          .loading-error strong { color: #dc3545; }
        svg text { font-size: 14px; }
        @media (max-width: 992px) { .content { flex-direction: column; min-height: auto; } .markdown-panel { border-right: none; border-bottom: 1px solid #e0e0e0; max-height: 400px; } #mindmap { min-height: 450px; } .container { max-width: 100%; margin: 10px; } .header { padding: 15px 20px; } .header h1 { font-size: 1.8em; } }
        @media (max-width: 768px) { .controls { flex-direction: column; align-items: stretch; } .btn { width: 100%; justify-content: center; } }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üó∫Ô∏è S∆° ƒë·ªì t∆∞ duy</h1>
            <p>Tr·ª±c quan h√≥a c·∫•u tr√∫c t√†i li·ªáu c·ªßa b·∫°n</p>
        </div>
        <div class="content">
            <div class="markdown-panel">
                <h3 class="panel-header">N·ªôi dung Markdown:</h3>
                <div class="markdown-content"><pre><code>${escapedMarkdown}</code></pre></div>
            </div>
            <div class="visualization-panel">
                <h3 class="panel-header">S∆° ƒë·ªì t∆∞∆°ng t√°c:</h3>
                <svg id="mindmap">
                    <foreignObject width="100%" height="100%">
                        <body xmlns="http://www.w3.org/1999/xhtml">
                            <div class="loading-error" id="loading-placeholder">ƒêang t·∫£i s∆° ƒë·ªì...</div>
                        </body>
                    </foreignObject>
                </svg>
            </div>
        </div>
        <div class="controls">
            <button class="btn btn-primary" onclick="downloadMindmap()">üì• T·∫£i v·ªÅ (PNG)</button>
            <button class="btn btn-secondary" onclick="window.print()">üñ®Ô∏è In S∆° ƒë·ªì</button>
            <a href="/upload/page" class="btn btn-secondary">‚Ü©Ô∏è Quay l·∫°i T·∫£i l√™n</a>
        </div>
    </div>
    <script>
        const markdownContent = \`${escapedMarkdown}\`;
        let mm; // Bi·∫øn Markmap to√†n c·ª•c
        let pz; // Bi·∫øn PanZoom to√†n c·ª•c

        function initializeMarkmap() {
            const svgElement = document.getElementById('mindmap');
            const loadingPlaceholder = svgElement ? svgElement.querySelector('#loading-placeholder') : null;
            
            if (typeof window.markmap === 'undefined' || typeof window.markmap.Markmap === 'undefined' || typeof window.markmap.Transformer === 'undefined' || typeof window.d3 === 'undefined') {
                console.warn('Markmap/D3 libraries not fully loaded yet, retrying...');
                if (loadingPlaceholder) loadingPlaceholder.textContent = 'ƒêang ch·ªù th∆∞ vi·ªán D3/Markmap...';
                setTimeout(initializeMarkmap, 150);
                return;
            }
            
            if (!svgElement) {
                console.error('SVG element #mindmap not found!');
                if (loadingPlaceholder) loadingPlaceholder.innerHTML = '<strong>L·ªói: Kh√¥ng t√¨m th·∫•y khu v·ª±c v·∫Ω s∆° ƒë·ªì.</strong>';
                return;
            }

            // D·ªçn d·∫πp instance c≈©
            if (pz) {
                pz.destroy();
                pz = null;
            }
            if (mm) {
                mm.destroy();
                mm = null;
            }

            svgElement.innerHTML = ''; // X√≥a n·ªôi dung c≈©
            console.log('Markmap libraries loaded, attempting to render.');
            
            const { Transformer, Markmap, panZoom } = window.markmap;
            
            try {
                const transformer = new Transformer();
                console.log('Transforming markdown...');
                
                const { root, features } = transformer.transform(markdownContent);
                console.log('Transformation result:', { root, features });
                
                if (!root || !root.content) {
                    console.error('Invalid root:', root);
                    throw new Error('N·ªôi dung Markdown kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng th·ªÉ ph√¢n t√≠ch th√†nh c·∫•u tr√∫c s∆° ƒë·ªì. (Root node invalid)');
                }
                
                const options = { 
                    autoFit: true,
                    duration: 500,
                    nodeMinHeight: 16,
                    spacingVertical: 5,
                    spacingHorizontal: 80,
                    paddingX: 8
                };
                
                mm = Markmap.create(svgElement, options, root);
                console.log('Markmap instance created successfully.');
                
                // √Åp d·ª•ng PanZoom sau khi Markmap ƒë√£ render
                if (panZoom) {
                    const g = svgElement.querySelector('g');
                    if(g) {
                        try {
                            pz = panZoom(g);
                            console.log('Pan and zoom enabled.');
                        } catch (panZoomError) {
                            console.warn('PanZoom failed:', panZoomError);
                        }
                    } else {
                        console.warn('No SVG group (g) element found to attach panZoom.');
                    }
                } else {
                    console.warn('PanZoom function not available.');
                }
                
            } catch (error) {
                console.error('‚ùå Error rendering mindmap:', error);
                
                let errorMessage = error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh.';
                if (error.message.includes('Markdown')) {
                    errorMessage += ' C·∫•u tr√∫c Markdown c√≥ v·∫•n ƒë·ªÅ.';
                }
                
                svgElement.innerHTML = \`
                    <foreignObject width="100%" height="100%">
                         <body xmlns="http://www.w3.org/1999/xhtml">
                             <div class="loading-error">
                                 <strong>L·ªói khi v·∫Ω s∆° ƒë·ªì:</strong><br/>
                                 \${errorMessage}<br/>
                                 <small style="margin-top: 10px; display: block;">
                                      <strong>Debug info:</strong><br/>
                                      Content length: \${markdownContent.length}<br/>
                                      Check console for details.
                                 </small>
                             </div>
                         </body>
                    </foreignObject>
                \`;
            }
        }

        function downloadMindmap() {
            try { 
                const svg = document.getElementById('mindmap'); 
                if (!svg) throw new Error('SVG element not found.'); 
                const g = svg.querySelector('g'); 
                if (!g) throw new Error('Mindmap group element not found. S∆° ƒë·ªì c√≥ th·ªÉ tr·ªëng.'); 
                
                // L·∫•y k√≠ch th∆∞·ªõc th·ª±c t·∫ø c·ªßa s∆° ƒë·ªì
                const bbox = g.getBBox(); 
                if (bbox.width === 0 || bbox.height === 0) {
                    console.warn("SVG BBox is empty, falling back to client dimensions.");
                    bbox.width = svg.clientWidth || 800;
                    bbox.height = svg.clientHeight || 600;
                    bbox.x = 0;
                    bbox.y = 0;
                }

                const padding = 40; // TƒÉng padding
                const canvas = document.createElement('canvas'); 
                const scale = 2; // TƒÉng ƒë·ªô ph√¢n gi·∫£i
                
                canvas.width = (bbox.width + padding * 2) * scale;
                canvas.height = (bbox.height + padding * 2) * scale;
                
                const ctx = canvas.getContext('2d'); 
                if (!ctx) throw new Error('Could not get canvas context.'); 
                
                ctx.scale(scale, scale); // √Åp d·ª•ng scale
                ctx.fillStyle = '#FFFFFF'; // N·ªÅn tr·∫Øng
                ctx.fillRect(0, 0, canvas.width / scale, canvas.height / scale); 
                
                // D·ªãch chuy·ªÉn canvas ƒë·ªÉ v·∫Ω s∆° ƒë·ªì v·ªõi padding
                // (padding - bbox.x) -> cƒÉn l·ªÅ
                ctx.translate(padding - bbox.x, padding - bbox.y);

                const svgData = new XMLSerializer().serializeToString(svg); 
                const img = new Image(); 
                
                img.onload = function() { 
                    try {
                        ctx.drawImage(img, 0, 0); 
                        const pngFile = canvas.toDataURL('image/png'); 
                        const downloadLink = document.createElement('a'); 
                        downloadLink.download = 'mindmap.png'; 
                        downloadLink.href = pngFile; 
                        document.body.appendChild(downloadLink); 
                        downloadLink.click(); 
                        document.body.removeChild(downloadLink); 
                    } catch (e) {
                        console.error("Error drawing image to canvas or downloading PNG:", e); 
                        alert("L·ªói khi t·∫°o file PNG ƒë·ªÉ t·∫£i v·ªÅ."); 
                    }
                }; 
                
                img.onerror = function(e) { 
                    console.error("Error loading SVG into Image:", e); 
                    alert("L·ªói khi t·∫£i d·ªØ li·ªáu s∆° ƒë·ªì ƒë·ªÉ chuy·ªÉn ƒë·ªïi sang ·∫£nh."); 
                } 
                
                const svgBase64 = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgData))); 
                img.src = svgBase64; 
                
            } catch (error) { 
                console.error('Error in downloadMindmap:', error); 
                alert('Kh√¥ng th·ªÉ t·∫£i s∆° ƒë·ªì d∆∞·ªõi d·∫°ng ·∫£nh: ' + error.message); 
            }
        }

        if (document.readyState === 'loading') { 
            document.addEventListener('DOMContentLoaded', initializeMarkmap); 
        } else { 
            initializeMarkmap(); 
        }
        
        let resizeTimer; 
        window.addEventListener('resize', () => { 
            clearTimeout(resizeTimer); 
            resizeTimer = setTimeout(() => { 
                console.log('Window resized, re-rendering mindmap.'); 
                // Ch·ªâ g·ªçi fit() thay v√¨ render l·∫°i to√†n b·ªô
                if (mm && typeof mm.fit === 'function') {
                    console.log('Calling mm.fit()');
                    mm.fit();
                } else {
                    // Fallback: render l·∫°i n·∫øu mm.fit() kh√¥ng t·ªìn t·∫°i
                    console.log('mm.fit() not available, re-initializing.');
                    initializeMarkmap(); 
                }
            }, 250); 
        });
    </script>
</body>
</html>
`;
}

module.exports = router;