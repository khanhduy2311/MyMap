// File: public/js/friends-chat.js

document.addEventListener('DOMContentLoaded', () => {
    // === KHAI B√ÅO BI·∫æN ===
    let currentUserId = null;       // ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i (l·∫•y t·ª´ server)
    let currentReceiverId = null;   // ID c·ªßa ng∆∞·ªùi ƒëang chat c√πng
    let currentReceiverUsername = null; // Username c·ªßa ng∆∞·ªùi ƒëang chat c√πng
    const socket = io();          // K·∫øt n·ªëi Socket.IO

    // L·∫•y c√°c element tr√™n trang
    const messagesContainer = document.getElementById('messages');
    const chatForm = document.getElementById('chatForm');
    const messageInput = document.getElementById('messageInput');
    const chatHeader = document.getElementById('chatWithHeader');
    const friendsListContainer = document.querySelector('.friends-list-scrollable');
    const messageSubmitButton = chatForm ? chatForm.querySelector('button[type="submit"]') : null;

    // === H√ÄM TR·ª¢ GI√öP ===

    // H√†m cu·ªôn xu·ªëng cu·ªëi khu v·ª±c tin nh·∫Øn
    function scrollToBottom() {
        if (messagesContainer) {
            // ƒê·∫∑t scroll behavior th√†nh 'smooth' n·∫øu mu·ªën cu·ªôn m∆∞·ª£t
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
    }

    // H√†m hi·ªÉn th·ªã tin nh·∫Øn
    function displayMessage(msg, isOwnMessage) {
        if (!messagesContainer) return;

        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message', isOwnMessage ? 'own' : 'other');

        const bubbleDiv = document.createElement('div');
        bubbleDiv.classList.add('message-bubble');
        bubbleDiv.textContent = msg.content; // Ch·ªâ hi·ªÉn th·ªã n·ªôi dung

        // Th√™m th·ªùi gian g·ª≠i (ƒë·ªãnh d·∫°ng n·∫øu c·∫ßn)
        const timeSpan = document.createElement('span');
        timeSpan.classList.add('message-time');
        timeSpan.textContent = msg.createdAt ? new Date(msg.createdAt).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' }) : '';
        bubbleDiv.appendChild(timeSpan);

        messageDiv.appendChild(bubbleDiv);

        // Ch√®n tin nh·∫Øn m·ªõi v√†o ƒê·∫¶U container (v√¨ flex-direction: column-reverse)
        messagesContainer.insertBefore(messageDiv, messagesContainer.firstChild);

        // X√≥a tr·∫°ng th√°i r·ªóng n·∫øu c√≥
        const emptyState = messagesContainer.querySelector('.empty-chat-state');
        if (emptyState) {
            emptyState.remove();
        }
    }

    // H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i online/offline cho b·∫°n b√®
    function updateUserStatus(userId, isOnline) {
        if (!friendsListContainer) return;
        const statusIndicator = friendsListContainer.querySelector(`.status-indicator[data-user-id="${userId}"]`);
        if (statusIndicator) {
            statusIndicator.classList.toggle('online', isOnline); // Th√™m/x√≥a class 'online'
            statusIndicator.classList.toggle('offline', !isOnline); // Th√™m/x√≥a class 'offline'
            console.log(`Status updated for ${userId}: ${isOnline ? 'Online' : 'Offline'}`);
        } else {
             console.log(`Status indicator not found for user ${userId}`);
        }
    }

    // === X·ª¨ L√ù SOCKET.IO ===
    if (socket) {
        // --- K·∫øt n·ªëi th√†nh c√¥ng ---
        socket.on('connect', () => {
            console.log('üîó Connected to Socket.IO server');
        });

        // --- X√°c th·ª±c th√†nh c√¥ng, nh·∫≠n userId ---
        socket.on('authenticated', (data) => {
            if (data && data.userId) {
                currentUserId = data.userId;
                console.log(`‚úÖ Authenticated with User ID: ${currentUserId}`);
            }
        });

        // --- Nh·∫≠n l·ªãch s·ª≠ chat ---
        socket.on('chatHistory', (data) => {
            console.log(`üìú Received chat history with ${data.receiverId}`);
            if (messagesContainer && data.receiverId === currentReceiverId) { // Ch·ªâ hi·ªÉn th·ªã n·∫øu ƒë√∫ng ng∆∞·ªùi ƒëang ch·ªçn
                // X√≥a tin nh·∫Øn c≈© v√† tr·∫°ng th√°i r·ªóng
                messagesContainer.innerHTML = '';

                if (data.messages && data.messages.length > 0) {
                    data.messages.forEach(msg => {
                        // Ki·ªÉm tra ID d·∫°ng string
                        const isOwn = msg.senderId.toString() === currentUserId.toString();
                        displayMessage(msg, isOwn);
                    });
                    scrollToBottom(); // Cu·ªôn xu·ªëng cu·ªëi sau khi t·∫£i xong
                } else {
                    // Hi·ªÉn th·ªã l·∫°i tr·∫°ng th√°i r·ªóng n·∫øu kh√¥ng c√≥ tin nh·∫Øn
                    messagesContainer.innerHTML = `
                        <div class="empty-chat-state">
                          <i class="fas fa-comments fa-4x"></i>
                          <p>Ch∆∞a c√≥ tin nh·∫Øn n√†o. B·∫Øt ƒë·∫ßu tr√≤ chuy·ªán!</p>
                        </div>`;
                }
            }
        });

        // --- Nh·∫≠n tin nh·∫Øn m·ªõi ---
        socket.on('receiveMessage', (msg) => {
            console.log('üì© Received message:', msg);
            // Ch·ªâ hi·ªÉn th·ªã n·∫øu ƒëang chat v·ªõi ng∆∞·ªùi g·ª≠i
            if (msg && msg.senderId === currentReceiverId) {
                displayMessage(msg, false); // Tin nh·∫Øn t·ª´ ng∆∞·ªùi kh√°c
                scrollToBottom();
            } else if (msg) {
                // (T√πy ch·ªçn: Hi·ªÉn th·ªã th√¥ng b√°o c√≥ tin nh·∫Øn m·ªõi t·ª´ ng∆∞·ªùi kh√°c)
                console.log(`Tin nh·∫Øn m·ªõi t·ª´ ${msg.senderId}, nh∆∞ng kh√¥ng ph·∫£i ng∆∞·ªùi ƒëang chat.`);
                 // C√≥ th·ªÉ th√™m hi·ªáu ·ª©ng nh·∫•p nh√°y ho·∫∑c badge cho ng∆∞·ªùi g·ª≠i trong danh s√°ch b·∫°n b√®
                 const friendItem = friendsListContainer.querySelector(`.friend-item[data-user-id="${msg.senderId}"]`);
                 if (friendItem && !friendItem.classList.contains('active')) {
                     // V√≠ d·ª•: th√™m class ƒë·ªÉ nh·∫•p nh√°y
                     friendItem.classList.add('new-message-indicator');
                     setTimeout(() => friendItem.classList.remove('new-message-indicator'), 2000); // B·ªè nh√°y sau 2s
                 }
            }
        });

        // --- X√°c nh·∫≠n tin nh·∫Øn ƒë√£ g·ª≠i ---
        // (H·ªØu √≠ch n·∫øu b·∫°n mu·ªën c·∫≠p nh·∫≠t tr·∫°ng th√°i 'ƒë√£ g·ª≠i'/'ƒë√£ xem')
        socket.on('messageSent', (msg) => {
            console.log('‚úÖ Message sent confirmation:', msg);
            // Hi·ªán t·∫°i ch·ªâ log, b·∫°n c√≥ th·ªÉ th√™m logic c·∫≠p nh·∫≠t UI n·∫øu c·∫ßn
        });

        // --- Nh·∫≠n l·ªói t·ª´ server ---
        socket.on('chatError', (errorMessage) => {
            console.error('‚ùå Chat Error:', errorMessage);
            // Hi·ªÉn th·ªã l·ªói cho ng∆∞·ªùi d√πng (v√≠ d·ª•: d√πng toast)
            if (typeof showToast === 'function') { // Ki·ªÉm tra h√†m showToast t·ªìn t·∫°i
                 showToast(errorMessage, 'L·ªói Chat', 'error');
            } else {
                 alert(`L·ªói Chat: ${errorMessage}`);
            }
        });

        // --- Nh·∫≠n tr·∫°ng th√°i typing ---
        socket.on('typing', (data) => {
            if (data && data.userId === currentReceiverId) {
                // (T√πy ch·ªçn: Hi·ªÉn th·ªã/·∫©n indicator "...")
                console.log(`${currentReceiverUsername} is ${data.isTyping ? 'typing...' : 'stopped typing'}`);
                const typingIndicator = document.getElementById('typingIndicator'); // C·∫ßn t·∫°o element n√†y trong HTML
                if (typingIndicator) {
                    typingIndicator.style.display = data.isTyping ? 'block' : 'none';
                }
            }
        });

        // --- Nh·∫≠n tr·∫°ng th√°i b·∫°n b√® ban ƒë·∫ßu ---
        socket.on('friends status', (data) => {
            console.log('Received initial friends status:', data);
            if (data?.onlineFriendIds && Array.isArray(data.onlineFriendIds) && friendsListContainer) {
                // 1. Reset t·∫•t c·∫£ v·ªÅ offline
                friendsListContainer.querySelectorAll('.status-indicator').forEach(el => {
                    el.classList.remove('online');
                    el.classList.add('offline');
                });
                // 2. C·∫≠p nh·∫≠t online cho nh·ªØng ng∆∞·ªùi trong danh s√°ch
                data.onlineFriendIds.forEach(userId => {
                    updateUserStatus(userId, true);
                });
            }
        });

        // --- Nh·∫≠n th√¥ng b√°o b·∫°n b√® online ---
        socket.on('user online', (data) => {
            console.log('User came online:', data);
            if (data?.userId) {
                updateUserStatus(data.userId, true);
            }
        });

        // --- Nh·∫≠n th√¥ng b√°o b·∫°n b√® offline ---
        socket.on('user offline', (data) => {
            console.log('User went offline:', data);
            if (data?.userId) {
                updateUserStatus(data.userId, false);
            }
        });

        // --- M·∫•t k·∫øt n·ªëi ---
        socket.on('disconnect', (reason) => {
            console.warn(`üîå Disconnected from Socket.IO server. Reason: ${reason}`);
            // (T√πy ch·ªçn: Hi·ªÉn th·ªã th√¥ng b√°o m·∫•t k·∫øt n·ªëi, th·ª≠ k·∫øt n·ªëi l·∫°i)
            if (chatHeader) chatHeader.textContent = "M·∫•t k·∫øt n·ªëi...";
             if (messageInput) messageInput.disabled = true;
             if (messageSubmitButton) messageSubmitButton.disabled = true;
             // Reset tr·∫°ng th√°i online c·ªßa m·ªçi ng∆∞·ªùi v·ªÅ offline tr√™n UI
             if (friendsListContainer) {
                 friendsListContainer.querySelectorAll('.status-indicator.online').forEach(el => {
                    el.classList.remove('online');
                    el.classList.add('offline');
                 });
             }
        });

    } else {
        console.error("Socket.IO client not initialized!");
         if (chatHeader) chatHeader.textContent = "Kh√¥ng th·ªÉ k·∫øt n·ªëi chat";
    }

    // === X·ª¨ L√ù G·ª¨I TIN NH·∫ÆN ===
    if (chatForm && messageInput && messageSubmitButton) {
        chatForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const content = messageInput.value.trim();

            if (content && currentReceiverId && socket && socket.connected) {
                console.log(`‚úâÔ∏è Sending message to ${currentReceiverId}: ${content}`);
                // G·ª≠i tin nh·∫Øn l√™n server
                socket.emit('sendMessage', {
                    receiverId: currentReceiverId,
                    content: content
                });

                // Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa m√¨nh ngay l·∫≠p t·ª©c (Optimistic UI)
                const tempMessage = {
                    content: content,
                    createdAt: new Date(), // Th·ªùi gian t·∫°m th·ªùi
                    senderId: currentUserId // ƒê·∫£m b·∫£o ƒë√∫ng ID
                };
                displayMessage(tempMessage, true);
                scrollToBottom();

                messageInput.value = ''; // X√≥a input
                messageInput.focus();
                // (T√πy ch·ªçn: G·ª≠i s·ª± ki·ªán typingStop sau khi g·ª≠i)
                 socket.emit('typingStop', { receiverId: currentReceiverId });
            } else if (!socket || !socket.connected) {
                 console.error("Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn: M·∫•t k·∫øt n·ªëi.");
                 if (typeof showToast === 'function') {
                    showToast("M·∫•t k·∫øt n·ªëi, kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn.", 'L·ªói', 'error');
                 }
            }
        });

        // === X·ª¨ L√ù TYPING INDICATOR (G·ª¨I L√äN SERVER) ===
         let typingTimer;
         const typingTimeout = 1500; // ms

         messageInput.addEventListener('input', () => {
             if (currentReceiverId && socket && socket.connected) {
                 // G·ª≠i 'typingStart' ngay l·∫≠p t·ª©c
                 socket.emit('typingStart', { receiverId: currentReceiverId });

                 // ƒê·∫∑t l·∫°i b·ªô ƒë·∫øm th·ªùi gian
                 clearTimeout(typingTimer);
                 typingTimer = setTimeout(() => {
                     // G·ª≠i 'typingStop' sau khi ng·ª´ng g√µ
                     socket.emit('typingStop', { receiverId: currentReceiverId });
                 }, typingTimeout);
             }
         });
    }

    // === H√ÄM GLOBAL ƒê·ªÇ CH·ªåN B·∫†N B√à ===
    // (ƒê·∫∑t ·ªü global scope ƒë·ªÉ onclick trong Pug c√≥ th·ªÉ g·ªçi)
    window.selectFriend = (userId, username) => {
        console.log(`Selected friend: ${username} (${userId})`);

        // B·ªè active c·ªßa ng∆∞·ªùi c≈© (n·∫øu c√≥)
        const currentActive = friendsListContainer ? friendsListContainer.querySelector('.friend-item.active') : null;
        if (currentActive) {
            currentActive.classList.remove('active');
        }

        // ƒê·∫∑t active cho ng∆∞·ªùi m·ªõi ch·ªçn
        const newActive = friendsListContainer ? friendsListContainer.querySelector(`.friend-item[data-user-id="${userId}"]`) : null;
        if (newActive) {
            newActive.classList.add('active');
            // B·ªè hi·ªáu ·ª©ng tin nh·∫Øn m·ªõi n·∫øu c√≥
             newActive.classList.remove('new-message-indicator');
        }

        // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi ƒëang chat
        currentReceiverId = userId;
        currentReceiverUsername = username;

        // C·∫≠p nh·∫≠t header chat
        if (chatHeader) {
            chatHeader.textContent = `Tr√≤ chuy·ªán v·ªõi ${username}`;
        }

        // K√≠ch ho·∫°t input v√† n√∫t g·ª≠i
         if (messageInput) messageInput.disabled = false;
         if (messageSubmitButton) messageSubmitButton.disabled = false;


        // Y√™u c·∫ßu l·ªãch s·ª≠ chat t·ª´ server
        if (socket && socket.connected) {
            messagesContainer.innerHTML = '<div>ƒêang t·∫£i l·ªãch s·ª≠ chat...</div>'; // Hi·ªÉn th·ªã loading t·∫°m th·ªùi
            socket.emit('getChatHistory', { receiverId: userId });
        } else {
             messagesContainer.innerHTML = '<div class="empty-chat-state"><p>M·∫•t k·∫øt n·ªëi...</p></div>';
        }
    };

}); // K·∫øt th√∫c DOMContentLoaded


// (T√πy ch·ªçn) CSS cho hi·ªáu ·ª©ng tin nh·∫Øn m·ªõi
const style = document.createElement('style');
style.textContent = `
    .friend-item.new-message-indicator {
        animation: blinkBackground 0.5s 3; /* Nh√°y 3 l·∫ßn */
    }
    @keyframes blinkBackground {
        50% { background-color: rgba(13, 110, 253, 0.1); }
    }
`;
document.head.appendChild(style);