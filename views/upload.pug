extends ../views/layouts/default.pug

block main
  .container.mt-4.upload-container
    .row.justify-content-center
      .col-lg-10
        .card.upload-card
          .card-body
            h2.card-title.text-center.mb-3
              i.fas.fa-file-upload.text-primary.me-2
              | Tải lên tài liệu để tóm tắt
            p.text-center.text-muted.mb-4
              | Chọn file PDF, DOCX, hoặc TXT. AI sẽ đọc và tóm tắt nội dung cho bạn.
              br
              small.text-warning
                i.fas.fa-info-circle.me-1
                | Tối đa 50MB

            form#uploadForm
              .mb-4
                .file-upload-area.border.rounded-3.p-4.text-center
                  i.fas.fa-cloud-upload-alt.display-4.text-muted.mb-3

                  label.form-label.fw-bold.fs-5(for="documentFile")
                    | Chọn hoặc kéo thả file vào đây

                  input.form-control.d-none(type="file" name="documentFile" id="documentFile" accept=".pdf,.docx,.txt,.jpg,.jpeg,.png,.gif")

                  .mt-2
                    small.text-muted PDF, DOCX, TXT, Ảnh (Tối đa 50MB)

                  #fileInfo.mt-2

              .d-grid
                button#submitBtn.btn.btn-primary.btn-lg.py-3(type="submit" disabled)
                  i.fas.fa-robot.me-2
                  | Bắt đầu phân tích tài liệu

            #progressArea.mt-4(style="display:none;")
              .processing-indicator.text-center.mb-3
                i.fas.fa-cog.fa-spin.fa-2x.text-primary
              .d-flex.justify-content-between.align-items-center.mb-2
                p#progressStatus.mb-0.fw-semibold Đang khởi tạo...
                span#progressText.badge.bg-primary.fs-6 0%
              .progress(role="progressbar" aria-label="Tiến trình xử lý" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="height: 12px;")
                .progress-bar.progress-bar-striped.progress-bar-animated#progressBar(style="width: 0%")

            #errorArea.alert.alert-danger.mt-3(style="display:none;")
              i.fas.fa-exclamation-triangle.me-2
              span#errorMessage

        .card.mt-4.demo-card
          .card-body
            h5.card-title.text-center.text-muted.mb-3
              i.fas.fa-project-diagram.me-2
              | Sơ đồ mindmap mẫu
            svg#demoMindmap(style="width: 100%; height: 350px; border: 1px solid #eee; border-radius: 8px;")
            p.text-center.text-muted.small.mt-2 Đây là ví dụ về kết quả bạn sẽ nhận được.

        .card.mt-4.upload-card#resultArea(style="display:none;")
          .card-header.bg-success.text-white.d-flex.align-items-center
            i.fas.fa-check-circle.me-2
            h4.mb-0.flex-grow-1 ✅ Phân tích hoàn tất!
            span#completionTime.badge.bg-light.text-success.fs-6
              i.fas.fa-clock.me-1
              | Thời gian: 0s

          .card-body
            .text-center.mb-4
              i.fas.fa-project-diagram.fa-3x.text-success.mb-3
              p.card-text.fs-5
                | Tài liệu đã được phân tích thành công!
                br
                | Bạn có muốn lưu hay xem sơ đồ trực quan?
              .d-grid.gap-3.d-md-flex.justify-content-md-center.mb-4
                button.btn.btn-success.btn-lg.px-4.py-3#createMindmapBtn(disabled)
                  i.fas.fa-save.me-2
                  | Lưu và Tạo Mindmap
                button.btn.btn-info.btn-lg.px-4.py-3#viewVisualizationBtn(type="button" style="display: none;")
                  i.fas.fa-eye.me-2
                  | Xem Sơ đồ trực quan
                button.btn.btn-outline-primary.btn-lg.px-4.py-3#viewJsonBtn(type="button")
                  i.fas.fa-code.me-2
                  | Xem dữ liệu Markdown
                button.btn.btn-outline-secondary.btn-lg.px-4.py-3#newUploadBtn(type="button")
                  i.fas.fa-plus.me-2
                  | Tải file mới

            #jsonPreview.mt-4(style="display: none;")
              .d-flex.justify-content-between.align-items-center.mb-3
                h5.mb-0
                  i.fas.fa-file-alt.me-2
                  | Nội dung Markdown
                .btn-group
                  button.btn.btn-sm.btn-outline-success#copyJsonBtn
                    i.fas.fa-copy.me-1
                    | Sao chép
                  button.btn.btn-sm.btn-outline-info#downloadJsonBtn
                    i.fas.fa-download.me-1
                    | Tải xuống

              .card.border-0
                .card-body.p-0
                  pre#mindmapPreview.bg-light.text-dark.p-4.rounded-3(style="max-height: 400px; overflow-y: auto; white-space: pre-wrap; word-break: break-all;")

        #rawTextSection.mt-4.d-none
          h5.text-primary.mb-2
            i.fas.fa-bug.me-2
            | Raw AI Output (DEBUG)
          pre#rawTextArea.bg-dark.text-success.p-3.rounded(style="max-height: 300px; overflow-y: auto; white-space: pre-wrap; font-size: 0.85rem;")

block scripts
  script(src="https://cdn.jsdelivr.net/npm/markmap-view@0.2.7")
  script(src="https://cdn.jsdelivr.net/npm/markmap-lib@0.11.6")

  script.
    // Biến toàn cục để theo dõi trạng thái
    let isSaving = false;
    let mindmapData = null;
    let visualizationUrl = null;
    let eventSource = null;
    let isProcessing = false;
    let currentFile = null;
    let startTime = null;

    function renderDemoMindmap() {
      try {
        if (typeof window.markmap === 'undefined' || typeof window.markmap.Transformer === 'undefined') {
          setTimeout(renderDemoMindmap, 100);
          return;
        }

        const { Transformer, Markmap } = window.markmap;

        const sampleMarkdown = `# Demo Mindmap\n## 1. Tải lên\n  - PDF\n  - DOCX\n  - TXT\n## 2. Phân tích\n  - Trích xuất nội dung\n  - AI tóm tắt\n  - Tạo các nhánh\n## 3. Kết quả\n  - Sơ đồ tương tác\n  - Nội dung Markdown`;
        const transformer = new Transformer();
        const { root, features } = transformer.transform(sampleMarkdown.trim());

        const svg = document.getElementById('demoMindmap');
        if (svg) {
          Markmap.create(svg, {}, root);
        }
      } catch (e) {
        console.error("Lỗi render demo mindmap:", e);
        const svg = document.getElementById('demoMindmap');
        if(svg) svg.innerHTML = '<p class="text-center text-danger p-4">Không thể tải sơ đồ mẫu.</p>';
      }
    }
    document.addEventListener('DOMContentLoaded', renderDemoMindmap);

    // DOM Elements
    const uploadForm = document.getElementById('uploadForm');
    const documentInput = document.getElementById('documentFile');
    const fileInfo = document.getElementById('fileInfo');
    const submitBtn = document.getElementById('submitBtn');
    const progressArea = document.getElementById('progressArea');
    const progressStatus = document.getElementById('progressStatus');
    const progressText = document.getElementById('progressText');
    const progressBar = document.getElementById('progressBar');
    const resultArea = document.getElementById('resultArea');
    const errorArea = document.getElementById('errorArea');
    const errorMessage = document.getElementById('errorMessage');
    const createMindmapBtn = document.getElementById('createMindmapBtn');
    const viewVisualizationBtn = document.getElementById('viewVisualizationBtn');
    const viewJsonBtn = document.getElementById('viewJsonBtn');
    const newUploadBtn = document.getElementById('newUploadBtn');
    const jsonPreview = document.getElementById('jsonPreview');
    const mindmapPreview = document.getElementById('mindmapPreview');
    const copyJsonBtn = document.getElementById('copyJsonBtn');
    const downloadJsonBtn = document.getElementById('downloadJsonBtn');
    const fileUploadArea = document.querySelector('.file-upload-area');
    const rawTextSection = document.getElementById('rawTextSection');
    const rawTextArea = document.getElementById('rawTextArea');
    const completionTimeSpan = document.getElementById('completionTime');

    // File Upload Handlers
    fileUploadArea.addEventListener('click', () => documentInput.click());
    fileUploadArea.addEventListener('dragover', (e) => { 
      e.preventDefault(); 
      fileUploadArea.classList.add('border-primary', 'bg-light'); 
    });
    fileUploadArea.addEventListener('dragleave', () => { 
      fileUploadArea.classList.remove('border-primary', 'bg-light'); 
    });
    fileUploadArea.addEventListener('drop', (e) => { 
      e.preventDefault(); 
      fileUploadArea.classList.remove('border-primary', 'bg-light'); 
      if (e.dataTransfer.files.length > 0) handleFileSelection(e.dataTransfer.files[0]); 
    });
    documentInput.addEventListener('change', (e) => { 
      if (e.target.files.length > 0) handleFileSelection(e.target.files[0]); 
    });

    function handleFileSelection(file) {
      const allowedTypes = ['application/pdf', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain', 'image/jpeg', 'image/png', 'image/gif'];
      if (!allowedTypes.includes(file.type)) {
        showError(`Loại file không hợp lệ: ${file.type}. Chỉ chấp nhận PDF, DOCX, TXT, JPG, PNG, GIF.`);
        resetFileSelection();
        return;
      }

      currentFile = file;
      const fileSize = (file.size / (1024 * 1024)).toFixed(2);
      if (fileSize > 50) { 
        showError('File quá lớn! Vui lòng chọn file nhỏ hơn 50MB.'); 
        resetFileSelection(); 
        return;
      }
      
      fileInfo.innerHTML = `<div class="alert alert-success py-2 d-flex justify-content-between align-items-center">
        <span class="me-2"><i class="fas fa-file me-2"></i><strong>${file.name}</strong> (${fileSize} MB)</span>
        <button type="button" class="btn-close btn-sm" onclick="resetFileSelection(event)"></button>
      </div>`;
      
      fileUploadArea.classList.add('border-success');
      submitBtn.disabled = false;
      hideError();
    }

    function resetFileSelection(event) {
      if(event) event.stopPropagation();
      documentInput.value = '';
      fileInfo.innerHTML = '';
      fileUploadArea.classList.remove('border-success', 'border-primary', 'bg-light');
      currentFile = null;
      submitBtn.disabled = true;
      hideError();
    }

    // Upload Form Handler
    uploadForm.addEventListener('submit', async (event) => {
      event.preventDefault();
      if (isProcessing || !currentFile) {
        showError(isProcessing ? 'Đang xử lý file trước đó. Vui lòng đợi...' : 'Vui lòng chọn một file.');
        return;
      }

      isProcessing = true;
      startTime = Date.now();
      submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Đang tải lên...';
      submitBtn.disabled = true;
      progressArea.style.display = 'block';
      updateProgressBar(0, '0%');
      progressStatus.textContent = 'Đang khởi tạo kết nối...';
      resultArea.style.display = 'none';
      jsonPreview.style.display = 'none';
      hideError();
      mindmapData = null;
      visualizationUrl = null;
      if (eventSource) eventSource.close();

      rawTextSection.classList.add('d-none');
      rawTextArea.textContent = '';
      resetResultButtons();

      const formData = new FormData();
      formData.append('documentFile', currentFile);

      try {
        const startResponse = await fetch('/upload/start-summarize', { 
          method: 'POST', 
          body: formData 
        });

        if (!startResponse.ok) {
          let errorData;
          try { errorData = await startResponse.json(); }
          catch (e) { errorData = { error: `Lỗi ${startResponse.status}: ${startResponse.statusText}` }; }
          throw new Error(errorData.error || `Lỗi server ${startResponse.status}`);
        }
        
        const { jobId } = await startResponse.json();
        if (!jobId) throw new Error("Server không trả về Job ID hợp lệ.");

        progressStatus.textContent = 'Đã có Job ID, đang kết nối stream...';
        eventSource = new EventSource(`/upload/summarize-stream?jobId=${encodeURIComponent(jobId)}`);

        eventSource.onopen = () => {
          console.log("SSE connection opened.");
          progressStatus.textContent = 'Đã kết nối, đang xử lý tài liệu...';
        };

        eventSource.addEventListener('progress', (event) => {
          try {
            const data = JSON.parse(event.data);
            if (data.totalChunks && data.totalChunks > 0 && typeof data.chunkCurrent !== 'undefined') {
              const percent = Math.max(0, Math.min(100, Math.round((data.chunkCurrent / data.totalChunks) * 100)));
              updateProgressBar(percent, `${percent}%`);
              progressStatus.textContent = `Đang xử lý phần ${data.chunkCurrent}/${data.totalChunks}...`;
            } else if (data.message) {
              progressStatus.textContent = data.message;
              if (data.message.includes('trích xuất')) updateProgressBar(10, '10%');
              else if (data.message.includes('chia thành')) updateProgressBar(15, '15%');
              else if (data.message.includes('tổng hợp')) updateProgressBar(90, '90%');
              else if (data.message.includes('tạo sơ đồ')) updateProgressBar(95, '95%');
            }
          } catch(e) {
            console.error("Error parsing progress event data:", e, event.data);
          }
        });

        eventSource.addEventListener('debug_raw', (event) => {
          try {
            rawTextSection.classList.remove('d-none');
            const data = JSON.parse(event.data);
            rawTextArea.textContent += `\n\n[Chunk ${data.chunk}] ${data.rawText}`;
            rawTextArea.scrollTop = rawTextArea.scrollHeight;
          } catch (e) {
            console.error("Error parsing debug_raw event:", e, event.data);
          }
        });

        eventSource.addEventListener('complete', (event) => {
          console.log("SSE complete event received.");
          if (eventSource) eventSource.close();
          try {
            const data = JSON.parse(event.data);
            mindmapData = data.markdown;
            visualizationUrl = data.visualizationUrl;

            progressStatus.textContent = 'Hoàn thành!';
            updateProgressBar(100, '100%');
            const duration = ((Date.now() - startTime) / 1000).toFixed(1);
            completionTimeSpan.innerHTML = `<i class="fas fa-clock me-1"></i> Thời gian: ${duration}s`;

            setTimeout(() => {
              progressArea.style.display = 'none';
              resultArea.style.display = 'block';
              mindmapPreview.textContent = mindmapData || "Không có nội dung Markdown được tạo.";
              isProcessing = false;
              resetSubmitButton();
              resultArea.scrollIntoView({ behavior: 'smooth', block: 'start' });

              createMindmapBtn.disabled = !mindmapData;
              if (visualizationUrl) {
                viewVisualizationBtn.style.display = 'inline-flex';
                viewVisualizationBtn.onclick = () => { window.open(visualizationUrl, '_blank'); };
              } else {
                viewVisualizationBtn.style.display = 'none';
              }
            }, 500);
          } catch (e) {
            console.error("Lỗi parse JSON 'complete':", e, event.data);
            showError('Lỗi xử lý dữ liệu kết quả từ server.');
            resetProcessingState();
          }
        });

        eventSource.addEventListener('error', (event) => {
          console.error("SSE error_event received:", event.data);
          if (eventSource) eventSource.close();
          try {
            const errorData = JSON.parse(event.data);
            showError(`Lỗi từ Server: ${errorData.message || 'Lỗi không xác định'}`);
          } catch(e) {
            showError('Lỗi không xác định từ server hoặc mất kết nối.');
          }
          resetProcessingState();
        });

        eventSource.onerror = (e) => {
          console.error("SSE Connection Error:", e);
          if (!mindmapData && isProcessing) {
            showError('Mất kết nối với server hoặc có lỗi mạng trong quá trình xử lý.');
            if (eventSource) eventSource.close();
            resetProcessingState();
          } else if (!isProcessing && eventSource) {
            eventSource.close();
            eventSource = null;
          }
        };

      } catch (error) {
        console.error("Error in uploadForm submit:", error);
        showError('Lỗi Khởi tạo: ' + error.message);
        resetProcessingState();
      }
    });

    // Result Buttons Handlers
    viewJsonBtn.addEventListener('click', () => {
      jsonPreview.style.display = jsonPreview.style.display === 'none' ? 'block' : 'none';
      if (jsonPreview.style.display === 'block') {
        jsonPreview.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      }
    });

    newUploadBtn.addEventListener('click', () => {
      console.log("New upload requested.");
      resetFileSelection();
      resultArea.style.display = 'none';
      jsonPreview.style.display = 'none';
      progressArea.style.display = 'none';
      hideError();
      mindmapData = null;
      visualizationUrl = null;
      startTime = null;
      if (eventSource) {
        eventSource.close();
        eventSource = null;
        console.log("Closed existing SSE connection for new upload.");
      }
      isProcessing = false;
      resetSubmitButton();
      resetResultButtons();
      window.scrollTo({ top: 0, behavior: 'smooth' });
    });

    copyJsonBtn.addEventListener('click', async () => {
      if (mindmapData) {
        try {
          await navigator.clipboard.writeText(mindmapData);
          copyJsonBtn.innerHTML = '<i class="fas fa-check me-1"></i>Đã sao chép!';
          copyJsonBtn.classList.remove('btn-outline-success');
          copyJsonBtn.classList.add('btn-success');
          setTimeout(() => {
            copyJsonBtn.innerHTML = '<i class="fas fa-copy me-1"></i>Sao chép';
            copyJsonBtn.classList.remove('btn-success');
            copyJsonBtn.classList.add('btn-outline-success');
          }, 2000);
        } catch (err) {
          console.error('Failed to copy text: ', err);
          alert('Không thể sao chép vào clipboard.');
        }
      }
    });

    downloadJsonBtn.addEventListener('click', () => {
      if (mindmapData) {
        try {
          const blob = new Blob([mindmapData], { type: 'text/markdown;charset=utf-8' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.style.display = 'none';
          a.href = url;
          const safeFilename = (currentFile?.name || 'mindmap').replace(/\.[^/.]+$/, "").replace(/[^a-z0-9]/gi, '_').toLowerCase();
          a.download = `${safeFilename}-${Date.now()}.md`;
          document.body.appendChild(a);
          a.click();
          window.URL.revokeObjectURL(url);
          document.body.removeChild(a);
        } catch (e) {
          console.error("Error creating download link:", e);
          alert("Không thể tạo file để tải xuống.");
        }
      }
    });

    // Save Mindmap Function - FIXED: Ngăn chặn gọi nhiều lần
    async function saveMindmap() {
      // Ngăn chặn gọi nhiều lần
      if (isSaving) {
        console.log("⏳ Đang lưu, vui lòng đợi...");
        return;
      }
      
      if (!mindmapData) {
        alert('Không có dữ liệu mindmap để lưu.');
        return;
      }

      if (isProcessing) {
        alert('Đang có tiến trình khác chạy, vui lòng đợi.');
        return;
      }

      console.log("💾 Bắt đầu lưu mindmap...");
      isSaving = true;
      
      createMindmapBtn.disabled = true;
      createMindmapBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Đang lưu...';

      let title = 'Mindmap không có tiêu đề';
      try {
        const firstLine = mindmapData.split('\n')[0];
        if (firstLine && firstLine.startsWith('#')) {
          title = firstLine.replace(/^#+\s*/, '').trim() || title;
        }
      } catch (e) { 
        console.warn("Không thể trích xuất tiêu đề từ markdown.");
      }

      try {
        console.log("📤 Gửi request lưu mindmap...");
        const response = await fetch('/mindmaps/create', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ title: title, content: mindmapData }),
        });

        const result = await response.json();
        console.log("📥 Response từ server:", result);

        if (!response.ok) {
          throw new Error(result.error || `Lỗi server ${response.status} khi lưu`);
        }

        if (result.redirectUrl) {
          console.log("🔄 Redirect đến:", result.redirectUrl);
          window.location.href = result.redirectUrl;
        } else {
          alert(result.message || 'Lưu thành công!');
          // Reset trạng thái sau khi lưu thành công
          isSaving = false;
          createMindmapBtn.disabled = false;
          createMindmapBtn.innerHTML = '<i class="fas fa-save me-2"></i>Lưu và Tạo Mindmap';
        }

      } catch (error) {
        console.error("❌ Lỗi khi lưu mindmap:", error);
        alert('Lỗi khi lưu Mindmap:\\n' + error.message);
        
        // Reset trạng thái khi có lỗi
        isSaving = false;
        createMindmapBtn.disabled = false;
        createMindmapBtn.innerHTML = '<i class="fas fa-save me-2"></i>Lưu và Tạo Mindmap';
      }
    }

    // CHỈ DÙNG 1 EVENT LISTENER DUY NHẤT cho nút lưu
    createMindmapBtn.addEventListener('click', function(e) {
      e.preventDefault();
      saveMindmap();
    });

    // Utility Functions
    function resetResultButtons() {
      createMindmapBtn.disabled = true;
      createMindmapBtn.innerHTML = '<i class="fas fa-save me-2"></i>Lưu và Tạo Mindmap';
      viewVisualizationBtn.style.display = 'none';
      viewVisualizationBtn.onclick = null;
    }

    function showError(message) {
      errorMessage.textContent = message;
      errorArea.style.display = 'block';
      errorArea.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    function hideError() {
      errorArea.style.display = 'none';
      errorMessage.textContent = '';
    }

    function resetSubmitButton() {
      submitBtn.innerHTML = '<i class="fas fa-robot me-2"></i>Bắt đầu phân tích tài liệu';
      submitBtn.disabled = !currentFile;
    }

    function resetProcessingState() {
      console.log("Resetting processing state.");
      isProcessing = false;
      startTime = null;
      resetSubmitButton();
      progressArea.style.display = 'none';
      updateProgressBar(0, '0%');
      if (eventSource) {
        eventSource.close();
        eventSource = null;
        console.log("Closed SSE connection during reset.");
      }
      resetResultButtons();
    }

    function updateProgressBar(value, text) {
      value = Math.max(0, Math.min(100, value));
      progressBar.style.width = `${value}%`;
      progressBar.setAttribute('aria-valuenow', value);
      progressText.textContent = text;
    }

    // Cleanup on page unload
    window.addEventListener('beforeunload', (event) => {
      if (isProcessing && eventSource) {
        console.log("Closing SSE connection on page unload.");
        eventSource.close();
        eventSource = null;
      } else if (eventSource) {
        eventSource.close();
        eventSource = null;
      }
    });

    // Initialize
    submitBtn.disabled = true;