doctype html
html(lang="vi")
  head
    meta(charset="UTF-8")
    title T√≥m t·∫Øt File (PDF, DOCX, TXT)
    
    //- Th∆∞ vi·ªán ƒë·ªçc file PDF v√† DOCX
    script(src="https://mozilla.github.io/pdf.js/build/pdf.mjs" type="module")
    script(src="https://cdn.jsdelivr.net/npm/mammoth@1.6.0/mammoth.browser.min.js")

    //- CSS trang tr√≠
    style.
      body {
        font-family: Arial, sans-serif;
        padding: 30px;
        max-width: 800px;
        margin: auto;
        background: #fafafa;
      }
      h1 {
        color: #333;
      }
      button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 6px;
        cursor: pointer;
        margin-top: 10px;
      }
      button:hover {
        background-color: #0056b3;
      }
      pre {
        background: #f5f5f5;
        padding: 15px;
        border-radius: 8px;
        white-space: pre-wrap;
        word-wrap: break-word;
      }
      #status {
        margin-top: 15px;
        font-weight: bold;
      }

  body
    h1 Upload Document ƒë·ªÉ t√≥m t·∫Øt n·ªôi dung
    p Ch·ªçn m·ªôt file (.pdf, .docx, .txt) ƒë·ªÉ AI t√≥m t·∫Øt.

    //- Input file ·∫©n ƒëi
    input(type="file" id="file-input" accept=".pdf,.docx,.txt" style="display:none;")
    
    //- N√∫t b·∫•m ch·ªçn file
    button(onclick="document.getElementById('file-input').click()") Ch·ªçn File

    //- Hi·ªÉn th·ªã tr·∫°ng th√°i v√† k·∫øt qu·∫£
    #status
    #summary-output

    //- Script ch√≠nh
    script(type="module").
      import { env, pipeline } from "https://cdn.jsdelivr.net/npm/@xenova/transformers@2.17.1";
      import * as pdfjsLib from "https://mozilla.github.io/pdf.js/build/pdf.mjs";

      pdfjsLib.GlobalWorkerOptions.workerSrc = "https://mozilla.github.io/pdf.js/build/pdf.worker.mjs";

      // ‚öôÔ∏è C·∫•u h√¨nh ƒë·ªÉ lu√¥n t·∫£i model t·ª´ Hugging Face thay v√¨ localhost
      env.allowLocalModels = false;

      // --- H√ÄM: ƒê·ªçc n·ªôi dung file ---
      async function extractTextFromFile(file) {
        const status = document.getElementById('status');
        status.textContent = `ƒêang ƒë·ªçc file: ${file.name}...`;
        const extension = file.name.split('.').pop().toLowerCase();
        const reader = new FileReader();

        return new Promise((resolve, reject) => {
          reader.onload = async (event) => {
            const arrayBuffer = event.target.result;
            try {
              if (extension === 'txt') {
                const textReader = new FileReader();
                textReader.onload = (e) => resolve(e.target.result);
                textReader.readAsText(file, 'UTF-8');

              } else if (extension === 'docx') {
                const result = await mammoth.extractRawText({ arrayBuffer });
                resolve(result.value);

              } else if (extension === 'pdf') {
                const pdf = await pdfjsLib.getDocument({ data: new Uint8Array(arrayBuffer) }).promise;
                let allText = '';
                for (let i = 1; i <= pdf.numPages; i++) {
                  const page = await pdf.getPage(i);
                  const textContent = await page.getTextContent();
                  allText += textContent.items.map(item => item.str).join(' ') + '\n';
                }
                resolve(allText);

              } else {
                reject(new Error('ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.'));
              }
            } catch (err) {
              reject(err);
            }
          };
          reader.onerror = (error) => reject(error);
          reader.readAsArrayBuffer(file);
        });
      }

      // --- H√ÄM: T√≥m t·∫Øt n·ªôi dung ---
      async function summarize(text) {
        const status = document.getElementById('status');
        const summaryOutput = document.getElementById('summary-output');

        try {
          status.textContent = 'ƒêang t·∫£i m√¥ h√¨nh AI (ch·ªâ l·∫ßn ƒë·∫ßu)...';
          const summarizer = await pipeline('summarization', 'Xenova/distilbart-cnn-6-6');
          status.textContent = '‚úÖ M√¥ h√¨nh ƒë√£ s·∫µn s√†ng. ƒêang t√≥m t·∫Øt...';

          const chunkSize = 400; // m·ªói ƒëo·∫°n 400 t·ª´
          const words = text.split(/\s+/);
          const chunks = [];
          for (let i = 0; i < words.length; i += chunkSize) {
            chunks.push(words.slice(i, i + chunkSize).join(' '));
          }

          let finalSummary = '';
          const maxChunks = 20; // tr√°nh treo tab
          const totalChunks = Math.min(chunks.length, maxChunks);

          for (let i = 0; i < totalChunks; i++) {
            status.textContent = `üß† ƒêang t√≥m t·∫Øt ƒëo·∫°n ${i + 1}/${totalChunks}...`;
            const output = await summarizer(chunks[i], { max_length: 100, min_length: 20 });
            finalSummary += output[0].summary_text + ' ';
          }

          if (chunks.length > maxChunks) {
            finalSummary += "\n\n[‚ö†Ô∏è N·ªôi dung qu√° d√†i, ch·ªâ t√≥m t·∫Øt ph·∫ßn ƒë·∫ßu.]";
          }

          status.textContent = '‚úÖ Ho√†n t·∫•t!';
          summaryOutput.innerHTML = `<hr><h2>K·∫øt qu·∫£ t√≥m t·∫Øt:</h2><pre>${finalSummary.trim()}</pre>`;

        } catch (error) {
          console.error(error);
          status.textContent = `‚ùå L·ªói t√≥m t·∫Øt: ${error.message}`;
        }
      }

      // --- H√ÄM: Khi ng∆∞·ªùi d√πng ch·ªçn file ---
      document.getElementById('file-input').addEventListener('change', async (event) => {
        const file = event.target.files[0];
        const status = document.getElementById('status');
        const summaryOutput = document.getElementById('summary-output');
        summaryOutput.innerHTML = '';

        if (file) {
          try {
            const text = await extractTextFromFile(file);
            if (text && text.trim().length > 0) {
              await summarize(text);
            } else {
              status.textContent = '‚ùå Kh√¥ng t√¨m th·∫•y n·ªôi dung vƒÉn b·∫£n trong file.';
            }
          } catch (e) {
            status.textContent = `‚ùå L·ªói: ${e.message}`;
            console.error(e);
          }
        }
      });
