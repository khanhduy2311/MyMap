// File: socketHandler.js
const { ObjectId } = require('mongodb');

// Map ƒë·ªÉ l∆∞u tr·∫°ng th√°i online: userId (string) -> socketId
const onlineUsers = new Map();

module.exports = (io, usersDb, chatDb) => {
    // L·∫•y c√°c collection c·∫ßn thi·∫øt
    const messagesCollection = chatDb.collection('messages');
    const friendsCollection = usersDb.collection('friends'); // Collection ƒë·ªÉ l·∫•y danh s√°ch b·∫°n b√®

    // === H√†m helper l·∫•y danh s√°ch ID b·∫°n b√® ===
    async function getFriendsList(userId) {
        if (!userId) return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ userId
        try {
            const friendships = await friendsCollection.find({
                status: 'accepted', // Ch·ªâ l·∫•y b·∫°n b√® ƒë√£ ch·∫•p nh·∫≠n
                $or: [{ senderId: userId }, { receiverId: userId }] // T√¨m trong c·∫£ hai tr∆∞·ªùng
            }).toArray();

            // L·∫•y ID c·ªßa ng∆∞·ªùi b·∫°n (kh√¥ng ph·∫£i userId hi·ªán t·∫°i)
            return friendships.map(f => {
                return f.senderId.equals(userId) ? f.receiverId : f.senderId;
            });
        } catch (error) {
            console.error(`‚ùå Error fetching friends list for user ${userId}:`, error);
            return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu c√≥ l·ªói
        }
    }

    // === X·ª≠ l√Ω khi c√≥ k·∫øt n·ªëi m·ªõi ===
    io.on('connection', async (socket) => {
        console.log(`üîå User connected: ${socket.id}`);
        let currentUserId = null; // Bi·∫øn l∆∞u ObjectId c·ªßa user cho socket n√†y
        let currentUserIdString = null; // Bi·∫øn l∆∞u string ID c·ªßa user

        // --- 1. X√°c th·ª±c ng∆∞·ªùi d√πng qua session ---
        try {
            // Ki·ªÉm tra session v√† user._id t·ªìn t·∫°i
            if (socket.request.session?.user?._id) {
                currentUserId = new ObjectId(socket.request.session.user._id);
                currentUserIdString = currentUserId.toString();
                console.log(`üôã User authenticated via session: ${currentUserIdString}`);
                socket.emit('authenticated', { userId: currentUserIdString }); // G·ª≠i ID v·ªÅ client
            } else {
                throw new Error('Session or user ID missing.'); // N√©m l·ªói n·∫øu thi·∫øu session
            }
        } catch (error) {
            console.warn(`üîí Authentication error for socket ${socket.id}: ${error.message}. Disconnecting.`);
            socket.emit('chatError', 'L·ªói x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
            socket.disconnect(true); // Ng·∫Øt k·∫øt n·ªëi n·∫øu x√°c th·ª±c l·ªói
            return; // D·ª´ng x·ª≠ l√Ω th√™m cho socket n√†y
        }

        // --- 2. X·ª≠ l√Ω tr·∫°ng th√°i Online ---
        // L∆∞u tr·∫°ng th√°i online
        onlineUsers.set(currentUserIdString, socket.id);
        console.log(`üü¢ User online: ${currentUserIdString}. Total online: ${onlineUsers.size}`);

        // L·∫•y danh s√°ch b·∫°n b√® c·ªßa user n√†y
        const friendObjectIds = await getFriendsList(currentUserId);
        const friendIds = friendObjectIds.map(id => id.toString()); // Chuy·ªÉn sang string array

        // Th√¥ng b√°o cho b·∫°n b√® ƒëang online bi·∫øt user n√†y online
        friendIds.forEach(friendId => {
            const friendSocketId = onlineUsers.get(friendId);
            if (friendSocketId) {
                io.to(friendSocketId).emit('user online', { userId: currentUserIdString });
                console.log(`   üì¢ Notified friend ${friendId} (socket ${friendSocketId}) that ${currentUserIdString} is online.`);
            }
        });

        // G·ª≠i cho user n√†y danh s√°ch b·∫°n b√® ƒëang online
        const onlineFriendIds = friendIds.filter(friendId => onlineUsers.has(friendId));
        socket.emit('friends status', { onlineFriendIds: onlineFriendIds });
        console.log(`   üì° Sent online status of ${onlineFriendIds.length} friends back to ${currentUserIdString}.`);

        // --- 3. L·∫Øng nghe c√°c s·ª± ki·ªán chat t·ª´ client ---

        // L·∫•y l·ªãch s·ª≠ chat
        socket.on('getChatHistory', async (data) => {
            if (!currentUserId || !data || !data.receiverId) return;
            console.log(`üìú Request chat history between ${currentUserIdString} and ${data.receiverId}`);
            try {
                const receiverId = new ObjectId(data.receiverId);
                const messages = await messagesCollection.find({
                    $or: [
                        { senderId: currentUserId, receiverId: receiverId },
                        { senderId: receiverId, receiverId: currentUserId }
                    ]
                }).sort({ createdAt: 1 }).toArray(); // S·∫Øp x·∫øp t·ª´ c≈© ƒë·∫øn m·ªõi

                socket.emit('chatHistory', {
                    receiverId: data.receiverId,
                    messages: messages,
                    currentUserId: currentUserIdString // G·ª≠i l·∫°i ID ƒë·ªÉ client bi·∫øt tin nh·∫Øn n√†o l√† c·ªßa m√¨nh
                });
            } catch (error) {
                console.error(`‚ùå Error fetching chat history for ${currentUserIdString} and ${data.receiverId}:`, error);
                socket.emit('chatError', 'Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ tin nh·∫Øn.');
            }
        });

        // Nh·∫≠n v√† g·ª≠i tin nh·∫Øn
        socket.on('sendMessage', async (data) => {
            if (!currentUserId || !data || !data.receiverId || !data.content) {
                console.warn("Invalid sendMessage data:", data);
                return;
            }
            console.log(`üí¨ Message from ${currentUserIdString} to ${data.receiverId}: ${data.content}`);
            try {
                const receiverId = new ObjectId(data.receiverId);
                const message = {
                    senderId: currentUserId,
                    receiverId: receiverId,
                    content: data.content,
                    createdAt: new Date()
                };
                const result = await messagesCollection.insertOne(message);

                // G·ª≠i l·∫°i tin nh·∫Øn ƒë√£ l∆∞u (c√≥ _id v√† createdAt) cho ng∆∞·ªùi g·ª≠i
                socket.emit('messageSent', { ...message, senderId: currentUserIdString, receiverId: data.receiverId }); // G·ª≠i ID d·∫°ng string

                // G·ª≠i tin nh·∫Øn cho ng∆∞·ªùi nh·∫≠n n·∫øu h·ªç online
                const receiverSocketId = onlineUsers.get(data.receiverId);
                if (receiverSocketId) {
                    io.to(receiverSocketId).emit('receiveMessage', { ...message, senderId: currentUserIdString, receiverId: data.receiverId }); // G·ª≠i ID d·∫°ng string
                    console.log(`   üì® Sent message to receiver ${data.receiverId} (socket ${receiverSocketId})`);
                } else {
                    console.log(`   üì™ Receiver ${data.receiverId} is offline. Message saved.`);
                    // (T√πy ch·ªçn: X·ª≠ l√Ω th√¥ng b√°o offline)
                }
            } catch (error) {
                console.error(`‚ùå Error sending message from ${currentUserIdString} to ${data.receiverId}:`, error);
                socket.emit('chatError', 'G·ª≠i tin nh·∫Øn th·∫•t b·∫°i.');
            }
        });

        // X·ª≠ l√Ω typing indicators (Gi·ªØ nguy√™n)
        socket.on('typingStart', (data) => {
            if (!currentUserId || !data || !data.receiverId) return;
            const receiverSocketId = onlineUsers.get(data.receiverId);
            if (receiverSocketId) {
                io.to(receiverSocketId).emit('typing', { userId: currentUserIdString, isTyping: true });
            }
        });

        socket.on('typingStop', (data) => {
             if (!currentUserId || !data || !data.receiverId) return;
            const receiverSocketId = onlineUsers.get(data.receiverId);
            if (receiverSocketId) {
                io.to(receiverSocketId).emit('typing', { userId: currentUserIdString, isTyping: false });
            }
        });

        // --- 4. X·ª≠ l√Ω khi ng·∫Øt k·∫øt n·ªëi ---
        socket.on('disconnect', async (reason) => {
            console.log(`üîå User disconnected: ${socket.id}. UserID: ${currentUserIdString}. Reason: ${reason}`);
            if (currentUserIdString) {
                // X√≥a tr·∫°ng th√°i online
                onlineUsers.delete(currentUserIdString);
                console.log(`üî¥ User offline: ${currentUserIdString}. Total online: ${onlineUsers.size}`);

                // L·∫•y l·∫°i danh s√°ch b·∫°n b√®
                const friendObjectIdsOnDisconnect = await getFriendsList(currentUserId);
                const friendIdsOnDisconnect = friendObjectIdsOnDisconnect.map(id => id.toString());

                // Th√¥ng b√°o cho b·∫°n b√® ƒëang online bi·∫øt user n√†y offline
                friendIdsOnDisconnect.forEach(friendId => {
                    const friendSocketId = onlineUsers.get(friendId);
                    if (friendSocketId) {
                        io.to(friendSocketId).emit('user offline', { userId: currentUserIdString });
                        console.log(`   üì¢ Notified friend ${friendId} (socket ${friendSocketId}) that ${currentUserIdString} is offline.`);
                    }
                });
            }
            // D·ªçn d·∫πp bi·∫øn
            currentUserId = null;
            currentUserIdString = null;
        });

    }); // K·∫øt th√∫c io.on('connection')
}; // K·∫øt th√∫c module.exports